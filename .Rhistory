position=position_jitter(width=0.03,height=0.001))+
coord_fixed() +
labs(colour = "Treatment",  title = "A. Bulk Soil")+
theme(legend.position="none",
legend.title = element_text(size=15, face='bold'),
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(size = 20, face="bold"),
axis.text=element_text(size=16),
axis.title=element_text(size=17,face="bold"),
legend.text=element_text(size=15),
legend.spacing.x = unit(0.05, 'cm'))+
stat_ellipse()
aob.pcoa_bulk.plot
mult <-.65
View(env.scores4)
geom_text_repel(data = env.scores4,
aes(x = mult*Dim1, y = mult*Dim2, label = Variable),
size = 3,fontface="bold",
position=position_jitter(width=0.03,height=0.001))
aob.pcoa_bulk.plot <- ggplot(data = aob.map.pcoa.bulk, aes(x=ax1.scores.bulk, y=ax2.scores.bulk, colour=Treatment))+
theme_bw()+
geom_point(data = aob.map.pcoa.bulk, aes(x = ax1.scores.bulk, y = ax2.scores.bulk, shape=Irrigation),size=5, alpha= 0.8)+
scale_color_viridis(discrete = T) +
scale_x_continuous(name=paste("PCoA1:\n",round(ax1.bulk,3)*100,"% var. explained", sep=""))+
scale_y_continuous(name=paste("PCoA2:\n",round(ax2.bulk,3)*100,"% var. explained", sep=""))+
geom_segment(data=env.scores4,
aes(x=0, xend=mult*Dim1, y=0, yend=mult*Dim2),
arrow = arrow(length = unit(0.3, "cm")),
colour = "grey")+
geom_text_repel(data = env.scores4,
aes(x = mult*Dim1, y = mult*Dim2, label = Variable),
size = 3,fontface="bold",
position=position_jitter(width=0.03,height=0.001))+
#coord_fixed() +
labs(colour = "Treatment",  title = "A. Bulk Soil")+
theme(legend.position="none",
legend.title = element_text(size=15, face='bold'),
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(size = 20, face="bold"),
axis.text=element_text(size=16),
axis.title=element_text(size=17,face="bold"),
legend.text=element_text(size=15),
legend.spacing.x = unit(0.05, 'cm'))+
stat_ellipse()
aob.pcoa_bulk.plot
aob.pcoa_bulk.plot <- ggplot(data = aob.map.pcoa.bulk, aes(x=ax1.scores.bulk, y=ax2.scores.bulk, colour=Treatment))+
theme_bw()+
geom_point(data = aob.map.pcoa.bulk, aes(x = ax1.scores.bulk, y = ax2.scores.bulk, shape=Irrigation),size=5, alpha= 0.8)+
scale_color_viridis(discrete = T) +
scale_x_continuous(name=paste("PCoA1:\n",round(ax1.bulk,3)*100,"% var. explained", sep=""))+
scale_y_continuous(name=paste("PCoA2:\n",round(ax2.bulk,3)*100,"% var. explained", sep=""))+
geom_segment(data=env.scores4,
aes(x=0, xend=mult*Dim1, y=0, yend=mult*Dim2),
arrow = arrow(length = unit(0.3, "cm")),
colour = "grey")+
geom_text_repel(data = env.scores4,
aes(x = mult*Dim1, y = mult*Dim2, label = Variable),
size = 3,fontface="bold",
position=position_jitter(width=0.03,height=0.001))+
#coord_fixed() +
labs(colour = "Treatment",  title = "A. Bulk Soil")+
theme(legend.position="none",
legend.title = element_text(size=15, face='bold'),
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(size = 20, face="bold"),
axis.text=element_text(size=16),
axis.title=element_text(size=17,face="bold"),
legend.text=element_text(size=15),
legend.spacing.x = unit(0.05, 'cm'))
# stat_ellipse()
aob.pcoa_bulk.plot
dat04seq1 #393 taxa, 23 samples
dat04seq <- subset_samples(aob.physeq_bulk1, Date=="04-28-22")
dat04seq1 <- prune_taxa(taxa_sums(dat04seq)>0, dat04seq)
sort(rowSums(otu_table(dat04seq1), na.rm = FALSE, dims = 1), decreasing = F)
dat04seq1 #393 taxa, 23 samples
################################################################################
# Filter low-abundant taxa
# keeping OTUs with at least 0.02 % relative abundance across all samples
physeq.subset <- dat04seq1
physeq.subset #393 Taxa, 23 Samples
data.obs <- as.data.frame(otu_table(physeq.subset))
keep.taxa.id=which((rowSums(data.obs)/sum(data.obs))>0.0002)
data.F=data.obs[keep.taxa.id,,drop=FALSE]
new.otu <- as.matrix(data.F) # convert it into a matrix.
new.otu <- otu_table(data.F, taxa_are_rows = TRUE) # convert into phyloseq compatible file.
otu_table(physeq.subset) <- new.otu # incorporate into phyloseq Object
physeq.subset # 254 taxa, 23 samples remain in the data set after filtering
################################################################################
#Lets generate a prevalence table (number of samples each taxa occurs in) for each taxa.
prevalencedf = apply(X = otu_table(physeq.subset),
MARGIN = 1,
FUN = function(x){sum(x > 0)})
# Add taxonomy and total read counts to this data.frame
prevalencedf = data.frame(Prevalence = prevalencedf,
TotalAbundance = taxa_sums(physeq.subset))
prevalencedf[1:10,]
dim(prevalencedf)
# calculate prevalence
ps = physeq.subset
df_tmp <- psmelt(ps)
df_tmp$sample <- 0
df_tmp$sample[df_tmp$Abundance > 0] <- 1 #E: DON'T UNDERSTAND WHY THIS IS DONE
df_otu_prev_ttt <- data.frame(matrix(ncol=nlevels(as.factor(df_tmp$x)),
nrow=nlevels(as.factor(df_tmp$OTU)),
dimnames=list(levels(as.factor(df_tmp$OTU)),
levels(as.factor(df_tmp$x)))))
#attention il ya Sample et sample
for (i in unique(df_tmp$OTU)) {
for (j in unique(df_tmp$x)) {
df_otu_prev_ttt[i,j] <- sum(df_tmp$sample[df_tmp$OTU == i & df_tmp$x == j],na.rm = T) / nrow(df_tmp[df_tmp$OTU == i & df_tmp$x == j,]) *100
print(paste(i,j,df_otu_prev_ttt[i,j]),sep="\t")
#print(df_otu_prev_ttt[i,j])
}
}
df_otu_prev_ttt$max_prev <- apply(df_otu_prev_ttt,MARGIN=1, FUN=max)
# filter otu par prevalence
physeq.subset
ps =  physeq.subset
df_prev = df_otu_prev_ttt
tmp_otu_F = rownames(df_prev[df_prev$max_prev >= 75,])
physeq.subset <- prune_taxa(taxa_names(ps) %in% tmp_otu_F, ps)
physeq.subset# 63 taxa, 23 samples
library(glmmTMB)
library(emmeans)
tmp_T3s <- physeq.subset
str(tmp_T3s)
#  treatment
a = tibble("sample"= as.factor(tmp_T3s@sam_data$SampleID),
"treatment"= as.character(tmp_T3s@sam_data$x))
# force control as intercept
#a[a == "Control"] <- "1a"
a = as.matrix(a$treatment)
# offset
o = log(sample_sums(tmp_T3s))
# random effect
z <- as.matrix(tmp_T3s@sam_data$SampleID)
# model with pairwise comparison ---------------------------------------------------------------------------------
glmT3s.sum.global = data.frame()
glmT3s.pairwise.global = data.frame()
for (i in 1:length(taxa_names(tmp_T3s))) {
OTU = taxa_names(tmp_T3s)[i]
# response variable
y = as.vector(tmp_T3s@otu_table[OTU,]@.Data)
tryCatch({
### model
glmT3s <- glmer(y ~ -1 + a + (1 | z), family='poisson',offset = o)
glmT3s.sum = summary(glmT3s)$coefficients
glmT3s.sum = tibble("OTU"= OTU,
"treatment"=rownames(glmT3s.sum),
as_tibble(glmT3s.sum))
glmT3s.sum
glmT3s.sum.global = rbind(glmT3s.sum.global,glmT3s.sum)
### multiple comparison
glmT3s.pairwise = emmeans(glmT3s,pairwise~a)
# select p value
glmT3s.pairwise.sum = summary(glmT3s.pairwise)
glmT3s.pairwise.sum = glmT3s.pairwise.sum[["contrasts"]]
# extract summary
tmp_df = glmT3s.pairwise.sum
# keep only comparisons of interest
tmp = unlist(strsplit(as.character(tmp_df$contrast)," - "))
tmp_df[,"a"] <- tmp[seq(1,length(tmp),by=2)]
tmp_df[,"b"] <- tmp[seq(2,length(tmp),by=2)]
#tmp_df = tmp_df[grep("Ni",tmp_df$b), ]
tmp_df = cbind("OTU"=OTU,tmp_df)
# extract results in data frame
glmT3s.pairwise.global = rbind(glmT3s.pairwise.global,tmp_df)
},
error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
rm(OTU,y,glmT3s,glmT3s.sum)
}
glmT3s.model.global.rare = glmT3s.sum.global
glmT3s.pairwise.global.rare = glmT3s.pairwise.global
glmT3s.pairwise.global.rare$p.adjust <- p.adjust(glmT3s.pairwise.global.rare$p.value, method = "fdr")
View(glmT3s.pairwise.global.rare)
## nb of pval <= 0.05 before and after filter
table(glmT3s.pairwise.global.rare$p.value <= 0.05)
table(glmT3s.pairwise.global.rare$p.adjust <= 0.05)
## nb of OTU with a pval <= 0.05 before and after filter
tmp_otu3s.rare = unique(glmT3s.pairwise.global.rare$OTU[glmT3s.pairwise.global.rare$p.adjust <= 0.05])
glmT3s.pairwise.global.signif.rare = glmT3s.pairwise.global.rare[glmT3s.pairwise.global.rare$p.adjust <=0.05,]
#write.csv(glmT3s.pairwise.global.signif.rare, file = "glmT3s.pairwise.global.signif.rare_dat04_nointer_220823.csv")
length(tmp_otu3s.rare)
View(glmT3s.pairwise.global.signif.rare)
dat04rawseq <- subset_samples(aob.bulk.rawseq1, Date=="04-28-22")
dat04rawseq1 <- prune_taxa(taxa_sums(dat04rawseq)>0, dat04rawseq)
sort(rowSums(otu_table(dat04rawseq1), na.rm = FALSE, dims = 1), decreasing = F)
dat04rawseq <- subset_samples(aob.bulk.rawseq1, Date=="04-28-22")
aob.physeq # still contain rhizosphere!, 1338 taxa 192 samples
sort(rowSums(otu_table(aob.physeq), na.rm = FALSE, dims = 1), decreasing = FALSE) # nothing is zero
aob.bulk.rawseq <- subset_samples(aob.physeq, Type=="BS")
aob.bulk.rawseq1 <- prune_taxa(taxa_sums(aob.bulk.rawseq)>0,aob.bulk.rawseq)
aob.bulk.rawseq1 # 1008 taxa
dat04rawseq <- subset_samples(aob.bulk.rawseq1, Date=="04-28-22")
dat04rawseq1 <- prune_taxa(taxa_sums(dat04rawseq)>0, dat04rawseq)
sort(rowSums(otu_table(dat04rawseq1), na.rm = FALSE, dims = 1), decreasing = F)
dat04rawseq1 #424 taxa, 24 samples
################################################################################
# Filter low-abundant taxa
# keeping OTUs with at least 0.02 % relative abundance across all samples
physeq.subset <- dat04rawseq1
physeq.subset #424 Taxa, 24 Samples
data.obs <- as.data.frame(otu_table(physeq.subset))
keep.taxa.id=which((rowSums(data.obs)/sum(data.obs))>0.0002)
data.F=data.obs[keep.taxa.id,,drop=FALSE]
new.otu <- as.matrix(data.F) # convert it into a matrix.
new.otu <- otu_table(data.F, taxa_are_rows = TRUE) # convert into phyloseq compatible file.
otu_table(physeq.subset) <- new.otu # incorporate into phyloseq Object
physeq.subset # 264 taxa, 24 samples remain in the data set after filtering
################################################################################
#Lets generate a prevalence table (number of samples each taxa occurs in) for each taxa.
prevalencedf = apply(X = otu_table(physeq.subset),
MARGIN = 1,
FUN = function(x){sum(x > 0)})
# Add taxonomy and total read counts to this data.frame
prevalencedf = data.frame(Prevalence = prevalencedf,
TotalAbundance = taxa_sums(physeq.subset))
prevalencedf[1:10,]
dim(prevalencedf)
# calculate prevalence
ps = physeq.subset
df_tmp <- psmelt(ps)
df_tmp$sample <- 0
df_tmp$sample[df_tmp$Abundance > 0] <- 1 #E: DON'T UNDERSTAND WHY THIS IS DONE
df_otu_prev_ttt <- data.frame(matrix(ncol=nlevels(as.factor(df_tmp$x)),
nrow=nlevels(as.factor(df_tmp$OTU)),
dimnames=list(levels(as.factor(df_tmp$OTU)),
levels(as.factor(df_tmp$x)))))
#attention il ya Sample et sample
for (i in unique(df_tmp$OTU)) {
for (j in unique(df_tmp$x)) {
df_otu_prev_ttt[i,j] <- sum(df_tmp$sample[df_tmp$OTU == i & df_tmp$x == j],na.rm = T) / nrow(df_tmp[df_tmp$OTU == i & df_tmp$x == j,]) *100
print(paste(i,j,df_otu_prev_ttt[i,j]),sep="\t")
#print(df_otu_prev_ttt[i,j])
}
}
df_otu_prev_ttt$max_prev <- apply(df_otu_prev_ttt,MARGIN=1, FUN=max)
# filter otu par prevalence
physeq.subset
ps =  physeq.subset
df_prev = df_otu_prev_ttt
tmp_otu_F = rownames(df_prev[df_prev$max_prev >= 75,])
physeq.subset <- prune_taxa(taxa_names(ps) %in% tmp_otu_F, ps)
physeq.subset# 69 taxa, 24 samples
tmp_T3s <- physeq.subset
str(tmp_T3s)
#  treatment
a = tibble("sample"= as.factor(tmp_T3s@sam_data$SampleID),
"treatment"= as.character(tmp_T3s@sam_data$x))
# force control as intercept
#a[a == "Control"] <- "1a"
a = as.matrix(a$treatment)
# offset
o = log(sample_sums(tmp_T3s))
# random effect
z <- as.matrix(tmp_T3s@sam_data$SampleID)
# model with pairwise comparison ---------------------------------------------------------------------------------
glmT3s.sum.global = data.frame()
glmT3s.pairwise.global = data.frame()
for (i in 1:length(taxa_names(tmp_T3s))) {
OTU = taxa_names(tmp_T3s)[i]
# response variable
y = as.vector(tmp_T3s@otu_table[OTU,]@.Data)
tryCatch({
### model
glmT3s <- glmer(y ~ -1 + a + (1 | z), family='poisson',offset = o)
glmT3s.sum = summary(glmT3s)$coefficients
glmT3s.sum = tibble("OTU"= OTU,
"treatment"=rownames(glmT3s.sum),
as_tibble(glmT3s.sum))
glmT3s.sum
glmT3s.sum.global = rbind(glmT3s.sum.global,glmT3s.sum)
### multiple comparison
glmT3s.pairwise = emmeans(glmT3s,pairwise~a)
# select p value
glmT3s.pairwise.sum = summary(glmT3s.pairwise)
glmT3s.pairwise.sum = glmT3s.pairwise.sum[["contrasts"]]
# extract summary
tmp_df = glmT3s.pairwise.sum
# keep only comparisons of interest
tmp = unlist(strsplit(as.character(tmp_df$contrast)," - "))
tmp_df[,"a"] <- tmp[seq(1,length(tmp),by=2)]
tmp_df[,"b"] <- tmp[seq(2,length(tmp),by=2)]
#tmp_df = tmp_df[grep("Ni",tmp_df$b), ]
tmp_df = cbind("OTU"=OTU,tmp_df)
# extract results in data frame
glmT3s.pairwise.global = rbind(glmT3s.pairwise.global,tmp_df)
},
error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
rm(OTU,y,glmT3s,glmT3s.sum)
}
glmT3s.model.global.raw = glmT3s.sum.global
glmT3s.pairwise.global.raw = glmT3s.pairwise.global
glmT3s.pairwise.global.raw$p.adjust <- p.adjust(glmT3s.pairwise.global.raw$p.value, method = "fdr")
View(glmT3s.pairwise.global.raw)
## nb of pval <= 0.05 before and after filter
table(glmT3s.pairwise.global.raw$p.value <= 0.05)
table(glmT3s.pairwise.global.raw$p.adjust <= 0.05)
aob.asv
setwd('D:/Fina/INRAE_Project/microservices/070623_AOB_out')
write.csv(aob.asv)
setwd('D:/Fina/INRAE_Project/microservices/070623_AOB_out')
write.csv(aob.asv, file = "aob.asv.csv"))
write.csv(aob.asv, file = "aob.asv.csv")
aob.asv.ord <- as.data.frame(otu_table(aob.physeq))
aob.asv.ord
write.csv(aob.asv.ord, file = "aob.asv.ord.csv")
otu_table(dat04seq1)#393 taxa, 23 samples
env_fit.aob.bc.bulk
# set working directory
setwd('D:/Fina/INRAE_Project/microservices/')
wd <- print(getwd())
# load the metadata
soilprop <- read.table('Soil_SamplingPlotData_DOK2022_edited.csv', sep='\t', header=T, row.names = 1, check.names = FALSE)
View(soilprop)
# load the metadata
soilprop <- read.csv('Soil_SamplingPlotData_DOK2022_edited.csv')
View(soilprop)
library(datarium)
library(rstatix)
View(soilprop)
View(soilprop)
###########################################################################
# 1. Response variable: GWC (Gravimetric water content in water content (g) / dry soil (g))
str(soilprop)
gwc <- soilprop %>%
group_by(Type, Treatment, Date) %>%
get_summary_stats(GWC, type = "mean_sd")
View(gwc)
soilprop$Date <- factor(soilprop$Date, levels = c("28/04/22", "01/06/2022", "05/07/2022", "20/07/22", "13/09/22"),
labels = c("04-28-22", "06-01-22", "07-05-22", "07-20-22", "09-13-22"))
# load the metadata
soilprop <- read.csv('Soil_SamplingPlotData_DOK2022_edited.csv')
###########################################################################
# 1. Response variable: GWC (Gravimetric water content in water content (g) / dry soil (g))
str(soilprop)
# load the metadata
soilprop <- read.csv('Soil_SamplingPlotData_DOK2022_edited.csv')
soilprop$Date <- factor(soilprop$Date, levels = c("28/04/2022", "01/06/2022", "05/07/2022", "20/07/2022", "13/09/2022"),
labels = c("04-28-22", "06-01-22", "07-05-22", "07-20-22", "09-13-22"))
gwc.sum <- soilprop %>%
group_by(Type, Treatment, Date) %>%
get_summary_stats(GWC, type = "mean_sd")
gwc.sum <- soilprop %>%
group_by(Type, Treatment, Date) %>%
get_summary_stats(GWC, type = "mean_sd")
###########################################################################
# 1. Response variable: GWC (Gravimetric water content in water content (g) / dry soil (g))
str(soilprop)
soilprop$Treatment
soilprop$Treatment <- factor(soilprop$Treatment, levels = c("D", "K", "M"),
labels = c("Biodynamic (D)", "Conventional (K)", "Mineral fertilized (M)"))
###########################################################################
# 1. Response variable: GWC (Gravimetric water content in water content (g) / dry soil (g))
str(soilprop)
gwc.sum <- soilprop %>%
group_by(Type, Treatment, Date) %>%
get_summary_stats(GWC, type = "mean_sd")
gwc.sum.plot <- ggboxplot(
soilprop, x = "Type", y = "GWC",
color = "Treatment", palette = "jco",
facet.by =  "Date")
gwc.sum.plot
#devtools::install_github("gauravsk/ranacapa")
#install.packages("ranacapa")
library(ranacapa)
ggrare <- function(physeq_object, step = 10, label = NULL, color = NULL, plot = TRUE, parallel = FALSE, se = TRUE) {
x <- as(otu_table(physeq_object), "matrix")
if (taxa_are_rows(physeq_object)) { x <- t(x) }
## This script is adapted from vegan `rarecurve` function
tot <- rowSums(x)
S <- rowSums(x > 0)
nr <- nrow(x)
rarefun <- function(i) {
cat(paste("rarefying sample", rownames(x)[i]), sep = "\n")
n <- seq(1, tot[i], by = step)
if (n[length(n)] != tot[i]) {
n <- c(n, tot[i])
}
y <- vegan::rarefy(x[i, ,drop = FALSE], n, se = se)
if (nrow(y) != 1) {
rownames(y) <- c(".S", ".se")
return(data.frame(t(y), Size = n, Sample = rownames(x)[i]))
} else {
return(data.frame(.S = y[1, ], Size = n, Sample = rownames(x)[i]))
}
}
if (parallel) {
out <- parallel::mclapply(seq_len(nr), rarefun, mc.preschedule = FALSE)
} else {
out <- lapply(seq_len(nr), rarefun)
}
df <- do.call(rbind, out)
# Get sample data
if (!is.null(phyloseq::sample_data(physeq_object, FALSE))) {
sdf <- methods::as(phyloseq::sample_data(physeq_object), "data.frame")
sdf$Sample <- rownames(sdf)
data <- merge(df, sdf, by = "Sample")
labels <- data.frame(x = tot, y = S, Sample = rownames(x))
labels <- merge(labels, sdf, by = "Sample")
}
# Add, any custom-supplied plot-mapped variables
if ( length(color) > 1 ) {
data$color <- color
names(data)[names(data) == "color"] <- deparse(substitute(color))
color <- deparse(substitute(color))
}
if ( length(label) > 1 ) {
labels$label <- label
names(labels)[names(labels) == "label"] <- deparse(substitute(label))
label <- deparse(substitute(label))
}
p <- ggplot2::ggplot(data = data,
ggplot2::aes_string(x = "Size",
y = ".S",
group = "Sample",
color = color))
p <- p + ggplot2::labs(x = "Sequence Sample Size", y = "Species Richness")
#if (!is.null(label)) {
#p <- p + ggplot2::geom_text(data = labels,
#ggplot2::aes_string(x = "x",
#y = "y",
#label = label,
#color = color),
#size = 4, hjust = 0)
#}
p <- p + ggplot2::geom_line(ggplot2::aes_string(), size=1)
if (se) { ## add standard error if available
p <- p +
ggplot2::geom_ribbon(ggplot2::aes_string(ymin = ".S - .se",
ymax = ".S + .se",
color = NULL,
fill = color),
alpha = 0.2)
}
if (plot) {
plot(p)
}
invisible(p)
}
# run the ggrare function attached in the file "generating_rarecurve.r"
set.seed(13)
aob.rare <- ggrare(aob.physeq, step = 1, color = "Type", label = "SampleID", se = FALSE)
plot.aob.rare <- aob.rare +
theme_bw()+
scale_color_manual(legend_title,values = Palette, labels = c("Bulk Soil", "Rhizosphere"))+
scale_size_manual(values = 60)+
#scale_fill_manual()+
labs(title = "(a) AOB", )+
theme( strip.text.x = element_text(size=14, face='bold'),
axis.text.x=element_text(size = 14),
axis.text.y = element_text(size = 14),
strip.text.y = element_text(size=18, face = 'bold'),
plot.title = element_text(size =20 ,face='bold'),
axis.title.y = element_text(size=15,face="bold"),
axis.title.x = element_text(size=15,face="bold"),
legend.position = "right",
legend.title = element_text(size=15),
legend.text = element_text(size = 13),
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
ylab("Number of ASVs")+xlab("Reads")
plot.aob.rare
gwc.sum.plot
# check assumption (outliers)
gwc.out <- soilprop %>%
group_by(Type, Treatment, Date) %>%
identify_outliers(GWC) # no extreme outliers
View(gwc.out)
# Saphiro-Wilk for normality
gwc.SW <- soilprop %>%
group_by(Type, Treatment, Date) %>%
shapiro_test(GWC)
View(gwc.SW)
ggqqplot(soilprop, "GWC", ggtheme = theme_bw()) +
facet_grid(Date ~ Treatment, labeller = "label_both") #All the points fall approximately along the reference line, for each cell. So we can assume normality of the data
# Lavene test
gwc.Lave <- soilprop %>%
group_by(Date) %>%
levene_test(GWC ~ Type*Treatment)
View(gwc.Lave)
#If group sample sizes are (approximately) equal, run the three-way mixed ANOVA anyway because it is somewhat robust to heterogeneity of variance in these circumstances.
# Three-Way Mixed (Split-Plot) ANOVA
set.seed(13)
gwc.3aov <- anova_test(
data = soilprop, type=2, dv = GWC, wid = PlotID,
within = Date, between = c(Type, Treatment))
get_anova_table(gwc.3aov)
gwc.3aov <- anova_test(
data = soilprop, type=3, dv = GWC, wid = PlotID,
within = Date, between = c(Type, Treatment))
#If group sample sizes are (approximately) equal, run the three-way mixed ANOVA anyway because it is somewhat robust to heterogeneity of variance in these circumstances.
# Three-Way Mixed (Split-Plot) ANOVA
set.seed(13)
gwc.3aov <- anova_test(
data = soilprop, type=3, dv = GWC, wid = PlotID,
within = Date, between = c(Type, Treatment))
get_anova_table(gwc.3aov)
# Test Method 3
gwc.lme <- lme(GWC ~ Type*Treatment*Date, random=~1 | PlotID, method="ML", data=soilprop)
anova(gwc.lme)
anova(gwc.lme, type = "III") # similar results as the three way mixed ANOVA above!!!
anova(gwc.lme, type = 3) # similar results as the three way mixed ANOVA above!!!
anova(gwc.lme, type = "III") # similar results as the three way mixed ANOVA above!!!

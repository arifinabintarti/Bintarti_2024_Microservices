success[i, 1] <- cap$m
success[i, 2] <- 100/length(cap$group) * length(which(cap$group == cap$CV))
}
par(mfrow = c(1,1))
plot(success$m, success$class.success, xlab = "Number of PCoA axes included", ylab = "Reclassification success rate (%)")
text(success$m, success$class.success, labels = success$m, pos = 1, cex = 0.6)
# run the final CAP by including PCoA axes showing the highest reclassification rate
set.seed(13)
aoa.cap.bulk <- CAPdiscrim(aoa.bulk_dist_bc ~ x, data = aoa.meta.bulk.ed, m = 44, permutations = 9999, add = TRUE) # 94.16667%
anova(aoa.bulk_pcoa_bc,permutations=999)
anova(aoa.bulk_pcoa_bc$points,permutations=999)
anova(aoa.bulk_pcoa_bc$eig,permutations=999)
anova(aoa.bulk_pcoa_bc$x,permutations=999)
anova(aoa.bulk_pcoa_bc$ac,permutations=999)
anova(aoa.bulk_pcoa_bc$GOF,permutations=999)
test = dbrda(aoa.bulk_dist_bc ~ Irrigation*Treatment+ Condition(patient),)
test = dbrda(aoa.bulk_dist_bc ~ Irrigation*Treatment+ Condition(block),data=aoa.meta.bulk.ed)
test
# similar with below:
set.seed(133)
perm1 = how(nperm = 999,
within = Within(type="free"),
plots = Plots(type = "none"),
blocks = block,
observed = TRUE)
set.seed(133)
aoa.adonis.bulk.perm1 <- adonis2(aoa.bulk_dist_bc ~ Irrigation*Treatment, data=aoa.meta.bulk.ed,
permutations = perm1)
aoa.adonis.bulk.perm1
set.seed(133)
aoa.adonis.bulk.perm1 <- adonis2(aoa.bulk_dist_bc ~ Irrigation, data=aoa.meta.bulk.ed,
permutations = perm1)
aoa.adonis.bulk.perm1
print(dbrda.aoa)
nested.npmanova(aoa.bulk_dist_bc ~ Treatment+Irrigation, data=aoa.meta.bulk.ed,
permutations=999)
set.seed(133)
nested.npmanova(aoa.bulk_dist_bc ~ Treatment*Irrigation, data=aoa.meta.bulk.ed,
permutations=999)
aoa.cap.bulk$PCoA
aoa.cap.bulk$lda.CV
aoa.cap.bulk$lda.other
aoa.cap.bulk$signi
aoa.cap.bulk$manova
aoa.cap.bulk
# run Jaccard beta diversity on bulk soil
aoa.bulk_dist_jac <- vegdist(t(aoa.asv.bulk1), binary = TRUE, method = "jaccard")
# run CAP on increasing numbers of PCoA axes to check how many axes need to be included in the model (diagnostics).
nc <- nrow(as.matrix(aoa.bulk_dist_jac))
success <- data.frame(m = numeric(nc), class.success = numeric(nc))
set.seed(133)
for (i in 1:50) {
cap <- CAPdiscrim(aoa.bulk_dist_jac ~ x, data = aoa.meta.bulk.ed, m = i, add = TRUE)
success[i, 1] <- cap$m
success[i, 2] <- 100/length(cap$group) * length(which(cap$group == cap$CV))
}
par(mfrow = c(1,1))
plot(success$m, success$class.success, xlab = "Number of PCoA axes included", ylab = "Reclassification success rate (%)")
text(success$m, success$class.success, labels = success$m, pos = 1, cex = 0.6)
# run CAP on increasing numbers of PCoA axes to check how many axes need to be included in the model (diagnostics).
nc <- nrow(as.matrix(aoa.bulk_dist_jac))
success <- data.frame(m = numeric(nc), class.success = numeric(nc))
set.seed(133)
for (i in 1:100) {
cap <- CAPdiscrim(aoa.bulk_dist_jac ~ x, data = aoa.meta.bulk.ed, m = i, add = TRUE)
success[i, 1] <- cap$m
success[i, 2] <- 100/length(cap$group) * length(which(cap$group == cap$CV))
}
par(mfrow = c(1,1))
plot(success$m, success$class.success, xlab = "Number of PCoA axes included", ylab = "Reclassification success rate (%)")
text(success$m, success$class.success, labels = success$m, pos = 1, cex = 0.6)
# run the final CAP by including PCoA axes showing the highest reclassification rate
set.seed(13)
aoa.cap.bulk.jac <- CAPdiscrim(aoa.bulk_dist_jac ~ x, data = aoa.meta.bulk.ed, m = 50, permutations = 9999, add = TRUE) # 94.16667%
success <- cbind(data.frame(aoa.cap.bulk.jac$group), data.frame(aoa.cap.bulk.jac$CV))
colnames(success) <- c("source", "classified")
rownames(success) <- rownames(aoa.cap.bulk.jac$PCoA)
success <- success[order(success$source), ]
success
aoa.cap1.bulk.jac <- paste("CAP1 (", round((100/sum(aoa.cap.bulk.jac$lda.other$svd^2) * aoa.cap.bulk.jac$lda.other$svd^2)[1],
digits = 1), "%)", sep = "")
aoa.cap2.bulk.jac <- paste("CAP2 (", round((100/sum(aoa.cap.bulk.jac$lda.other$svd^2) * aoa.cap.bulk.jac$lda.other$svd^2)[2],
digits = 1), "%)", sep = "")
plot(aoa.cap.bulk.jac$x[, 1:2], xlab = aoa.cap1.bulk.jac, ylab = aoa.cap2.bulk.jac, pch = c(16, 17),
col = c("#009E73","#FF618C","#E69F00", "#009E73", "#FF618C", "#E69F00")[aoa.meta.bulk.ed$x])
ordiellipse(aoa.cap.bulk.jac$x[, 1:2], groups = aoa.meta.bulk.ed$x, draw = "polygon",
col = c("#009E73","#FF618C","#E69F00", "#009E73", "#FF618C", "#E69F00"), pch = c(16, 17),
kind = "ehull",   border = NA, alpha = 50)
aoa.cap.jac.plot <- ggplot(as.data.frame(aoa.cap.bulk.jac$x), aes(x = aoa.cap.bulk.jac$x[,1], y = aoa.cap.bulk.jac$x[,2])) +
geom_point(aes(color = aoa.meta.bulk.ed$Treatment, shape = aoa.meta.bulk.ed$Irrigation), size = 2) +
#geom_text(label=aoa.meta.bulk.ed$PlotID)+
xlab(aoa.cap1.bulk.jac) + ylab(aoa.cap2.bulk.jac) +
scale_color_manual(values = c("#009E73","#FF618C","#E69F00"),
name = "Farming system",
labels = c("BIODYN", "CONFYM", "CONMIN")) +
scale_shape_manual(values = c(8, 1),
name = "Irrigation treatment",
labels = c("control", "drought-induced")) + theme_classic() +
scale_fill_manual(values = c("#009E73","#FF618C","#E69F00", "#009E73", "#FF618C", "#E69F00")) +
geom_mark_ellipse(aes(fill = aoa.meta.bulk.ed$x),
expand = 0, linewidth = NA, show.legend = FALSE)  +
labs(title = "AOA")+
theme(axis.text.x = element_text(color = "grey20", size = 10, angle = 0, hjust = .5, vjust = .5, face = "plain"),
axis.text.y = element_text(color = "grey20", size = 10, angle = 0, hjust = 1, vjust = 0, face = "plain"),
axis.title.x = element_text(color = "grey20", size = 12, angle = 0, hjust = .5, vjust = .5, face = "plain"),
axis.title.y = element_text(color = "grey20", size = 12, angle = 90, hjust = .5, vjust = .5, face = "plain")) +
#theme(plot.margin = unit(c(1,1,1,1), "cm")) +
theme(legend.position = "none",
legend.title = element_text(size=13),
legend.text = element_text(size=13))
#annotate("text",x=-12,y=-15,label= "Overall reclassification rate: 94.2%", hjust = 0, size = 4)
#annotate("text", x=-12, y=-16.5, label= "Pillai's test=3.1***", hjust = 0, size = 4)
aoa.cap.jac.plot
# 2. Using ANOSIM package and define the strata
set.seed(133)
# 2. Using ANOSIM package and define the strata
set.seed(133)
anosim(aoa.bulk_dist_bc,
grouping = aoa.meta.bulk.ed$Irrigation, permutations = 9999, strata = block)
# this one give significant irrigation:
set.seed(133)
perm2 = how(nperm = 999,
within = Within(type="free"),
plots = with(aoa.meta.bulk,
Plots(strata=Block,
type="free")))
set.seed(133)
aoa.adonis.bulk.perm2 <- adonis2(aoa.bulk_dist_bc ~ Treatment*Irrigation, data=aoa.meta.bulk.ed,
permutations = perm2) # not significant
aoa.adonis.bulk.perm2
# 2. Using ANOSIM package and define the strata
set.seed(133)
aoa.bs.anosim <- anosim(aoa.bulk_dist_bc,
grouping = aoa.meta.bulk.ed$Irrigation, permutations = 999, strata = block)
plot(aoa.bs.anosim)
# 2. Using ANOSIM package and define the strata
set.seed(133)
aoa.bs.anosim <- anosim(aoa.bulk_dist_bc,
grouping = aoa.meta.bulk.ed$x, permutations = 999, strata = block)
plot(aoa.bs.anosim)
# similar with below:
set.seed(133)
perm1 = how(nperm = 999,
within = Within(type="free"),
plots = Plots(type = "none"),
blocks = block,
observed = TRUE)
aoa.bs.anosim
# 2. Using ANOSIM package and define the strata
set.seed(133)
aoa.bs.anosim <- anosim(aoa.bulk_dist_bc,
grouping = aoa.meta.bulk.ed$x, permutations = perm1)
aoa.bs.anosim
summary(aoa.bs.anosim)
str(aoa.bs.anosim)
aoa.bs.anosim$statistic
aoa.bs.anosim$perm
aoa.bs.anosim$permutations
aoa.bs.anosim$signif
set.seed(133)
aoa.adonis.bulk.x <- adonis2(aoa.bulk_dist_bc ~ Irrigation, strata=Treatment, data=aoa.meta.bulk.ed,
permutations = 999) # not significant
aoa.meta.bulk.ed
STR(aoa.meta.bulk.ed)
str(aoa.meta.bulk.ed)
set.seed(133)
aoa.adonis.bulk.x <- adonis2(aoa.bulk_dist_bc ~ Irrigation, strata=aoa.meta.bulk.ed$Treatment, data=aoa.meta.bulk.ed,
permutations = 999) # not significant
aoa.adonis.bulk.x
# similar with below:
set.seed(133)
trt=as.factor(aoa.meta.bulk$Treatment)
# similar with below:
set.seed(133)
perm1 = how(nperm = 999,
within = Within(type="free"),
plots = Plots(type = "none"),
blocks = trt,
observed = TRUE)
set.seed(133)
set.seed(133)
aoa.adonis.bulk.perm1 <- adonis2(aoa.bulk_dist_bc ~ Irrigation, data=aoa.meta.bulk.ed,
permutations = perm1)
aoa.adonis.bulk.perm1
aob.cap.bulk
# run CAP on increasing numbers of PCoA axes to check how many axes need to be included in the model (diagnostics).
nc <- nrow(as.matrix(aob.bulk_dist_bc))
success <- data.frame(m = numeric(nc), class.success = numeric(nc))
set.seed(133)
for (i in 1:50) {
cap <- CAPdiscrim(aob.bulk_dist_bc ~ x, data = aob.meta.bulk.ed, m = i, add = TRUE)
success[i, 1] <- cap$m
success[i, 2] <- 100/length(cap$group) * length(which(cap$group == cap$CV))
}
par(mfrow = c(1,1))
aoa.cap.bulk
set.seed(133)
aoa.pwc.bulk.X <- pairwiseAdonis::pairwise.adonis(aoa.bulk_dist_bc,
aoa.meta.bulk.ed$x,
p.adjust.m = "BH")
aoa.pwc.bulk.X
set.seed(133)
permanova_pairwise(
aoa.bulk_dist_bc,
grp=TxI,
permutations = 999,
method = "bray",
padj = "fdr")
set.seed(133)
permanova_pairwise(
aoa.bulk_dist_bc,
grp=trt,
permutations = 999,
method = "bray",
padj = "fdr")
irri=as.factor(aoa.meta.bulk$Irrigation)
set.seed(133)
permanova_pairwise(
aoa.bulk_dist_bc,
grp=irri,
permutations = 999,
method = "bray",
padj = "fdr")
# similar with below:
set.seed(133)
perm1 = how(nperm = 999,
within = Within(type="free"),
plots = Plots(type = "none"),
blocks = trt,
observed = TRUE)
set.seed(133)
permanova_pairwise(
aoa.bulk_dist_bc,
grp=irri,
permutations = perm1,
method = "bray",
padj = "fdr")
# similar with below:
set.seed(133)
perm1 = how(nperm = 999,
within = Within(type="free"),
plots = Plots(type = "none"),
blocks = block,
observed = TRUE)
set.seed(133)
permanova_pairwise(
aoa.bulk_dist_bc,
grp=irri,
permutations = perm1,
method = "bray",
padj = "fdr")
set.seed(133)
permanova_pairwise(
aoa.bulk_dist_bc,
grp=TxI,
permutations = perm1,
method = "bray",
padj = "fdr")
# similar with below:
set.seed(133)
perm1 = how(nperm = 999,
within = Within(type="free"),
plots = Plots(type = "none"),
blocks = block,
observed = TRUE)
permanova_pairwise(
aoa.bulk_dist_bc,
grp=TxI,
permutations = perm1,
method = "bray",
padj = "fdr")
library(multcomp)
library(car)
library(BiocManager)
library(vegan)
library(plyr)
library(dplyr)
library(tidyverse)
library(tidyr)
library(devtools)
devtools::install_github("r-lib/conflicted")
#devtools::install_github("r-lib/conflicted")
library(conflicted)
library(dplyr)
library(tidyverse)
library(tidyr)
library(ggplot2)
library(ggtext)
library(reshape)
library(ggpubr)
library(car)
library(agricolae)
library(multcompView)
library(grid)
library(gridExtra)
library(sjmisc)
library(sjPlot)
library(MASS)
library(FSA)
library(rcompanion)
library(onewaytests)
library(ggsignif)
library(PerformanceAnalytics)
library(gvlma)
library(ggpmisc)
library(tibble)
library(fitdistrplus)
library(lme4)
library(nlme)
library(ape)
#### 1a. Analyses of Bulk Soil - Copies per Gram Dry weight of Soil ####
setwd('/Users/arifinabintarti/Documents/France/microservices/')
#setwd('D:/Fina/INRAE_Project/microservices/')
qPCR <- read.csv("qPCR_results_LP_stat.csv")
qPCR.BS <- qPCR[1:120,]
str(qPCR.BS)
qPCR.BS$nr <- as.factor(qPCR.BS$nr)
qPCR.BS$plot <- as.factor(qPCR.BS$plot)
qPCR.BS$block <- as.factor(qPCR.BS$block)
qPCR.BS$irrigation <- as.factor(qPCR.BS$irrigation)
qPCR.BS$fertilization <- as.factor(qPCR.BS$fertilization)
qPCR.BS$type <- as.factor(qPCR.BS$type)
qPCR.BS$sampling.date <- as.factor(qPCR.BS$sampling.date)
qPCR.BS$var3 <- as.factor(qPCR.BS$var3)
qPCR.BS$x <- as.factor(qPCR.BS$x)
qPCR.BS$rep <- as.factor(qPCR.BS$rep)
qPCR.BS$sampling.date <- factor(qPCR.BS$sampling.date, levels = c("28/04/2022", "1/6/22", "5/7/22", "20/07/2022", "13/09/2022"),
labels = c("Apr 28th", "Jun 1st", "Jul 5th", "Jul 20th", "Sept 13th"))
str(qPCR.BS)
# perform log transformation
qPCR.BS$AOA_logDWS <- log10(qPCR.BS$AOA_nbc_per_g_DW_soil)
qPCR.BS$AOB_logDWS <- log10(qPCR.BS$AOB_nbc_per_g_DW_soil)
qPCR.BS$ComA_logDWS <- log10(qPCR.BS$ComA_nbc_per_g_DW_soil)
qPCR.BS$ComB_logDWS <- log10(qPCR.BS$ComB_nbc_per_g_DW_soil)
qPCR.BS$Tot_logDWS <- log10(qPCR.BS$Tot_nbc_per_g_DW_soil)
# perform arcsin root square
qPCR.BS$AOA_16.arc.ratio <- asin(sqrt(qPCR.BS$AOA_16S_ratio_percent / 100))
qPCR.BS$AOB_16.arc.ratio <- asin(sqrt(qPCR.BS$AOB_16S_ratio_percent / 100))
qPCR.BS$ComA_16.arc.ratio <- asin(sqrt(qPCR.BS$ComA_16S_ratio_percent / 100))
qPCR.BS$ComB_16.arc.ratio <- asin(sqrt(qPCR.BS$ComB_16S_ratio_percent / 100))
qPCR.BS$AOA_AOB.arc.ratio <- asin(sqrt(qPCR.BS$AOA_AOB_ratio / 100))
qPCR.BS$ComA_ComB.arc.ratio <- asin(sqrt(qPCR.BS$ComA_ComB_ratio / 100))
# anova test for non-transformed AOA
# Linear mixed model
library(lmerTest)
# Intercept varying among block within sampling date.
# so we need a random effect enumerated by all of block by sampling date combinations
aoa.dws <- lmerTest::lmer(AOA_nbc_per_g_DW_soil ~ irrigation*fertilization*sampling.date+
(1|sampling.date:block), data=qPCR.BS, na.action=na.omit)
# Linear mixed model
library(lmerTest)
# Intercept varying among block within sampling date.
# so we need a random effect enumerated by all of block by sampling date combinations
t.16S <- lmerTest::lmer(Tot_logDWS ~ irrigation*fertilization*sampling.date+
(1|sampling.date:block), data=qPCR.BS, na.action=na.omit)
anova(t.16S)
anova(t.16S)
# SET THE WORKING DIRECTORY
setwd('/Users/arifinabintarti/Documents/France/microservices/030423_AOA_out/AOA.ASV-analysis')
#setwd('D:/Fina/INRAE_Project/microservices/030423_AOA_out/AOA.ASV-analysis')
wd <- print(getwd())
# load the asv table
aoa.asv <- read.table('annotated.AOA.ASVs.counts.tsv', sep='\t', header=T, row.names = 1, check.names = FALSE)
dim(aoa.asv) # 646  192
sort(rowSums(aoa.asv, na.rm = FALSE, dims = 1), decreasing = F) # there are no asv that does not exist in at least one sample.
# load the taxonomy table
setwd('/Users/arifinabintarti/Documents/France/microservices/030423_AOA_out/')
#setwd('D:/Fina/INRAE_Project/microservices/030423_AOA_out/')
aoa.tax <- read.table("besthit.diamond.output.curateddb.AOA.ASVs.edited.csv", sep = ';', header=T)
dim(aoa.tax) # 646
# load the metadata
setwd('/Users/arifinabintarti/Documents/France/microservices/')
#setwd('D:/Fina/INRAE_Project/microservices/')
meta_micro <- read.csv("meta_microservices.csv")
# load phylogenetic tree (nwk file)
setwd('/Users/arifinabintarti/Documents/France/microservices/030423_AOA_out/AOA-rooted-tree/')
#setwd('D:/Fina/INRAE_Project/microservices/030423_AOA_out/AOA-rooted-tree/')
AOA_rooted_tree <- ape::read.tree("tree.nwk")
AOA_rooted_tree
re_order <- match(rownames(meta_micro), colnames(aoa.asv))
aoa.asv.ord  <- aoa.asv[ ,re_order]
aoa.asv.physeq = otu_table(aoa.asv.ord, taxa_are_rows = TRUE) # asv table
############################################################################
# rarefaction curve
library(phyloseq)
set.seed(13)
rarecurve(t(aoa.asv), step=50, cex=0.5, lwd=2, ylab="ASV", label=F)
# re-order the rownames of the asv table to match the colnames of the metadata.
re_order <- match(rownames(meta_micro), colnames(aoa.asv))
aoa.asv.ord  <- aoa.asv[ ,re_order]
aoa.asv.physeq = otu_table(aoa.asv.ord, taxa_are_rows = TRUE) # asv table
sample_names(aoa.asv.physeq)
# adding "S" for sample names to avoid possible problem later on
sample_names(aoa.asv.physeq) <- paste0("S", sample_names(aoa.asv.physeq))
# phyloseq object of the taxonomy table
aoa.tax <- column_to_rownames(aoa.tax, var = "ASVid")
#row.names(aoa.tax) <- aoa.tax$ASVid
aoa.tax.physeq = tax_table(as.matrix(aoa.tax)) # taxonomy table
# phyloseq object of the metadata
meta_micro$Date <- factor(meta_micro$Date, levels = c("4/28/22", "06/01/2022", "07/05/2022", "7/20/22", "9/13/22"),
labels = c("Apr 28th", "Jun 1st", "Jul 5th", "Jul 20th", "Sept 13th"))
rownames(meta_micro) <- sample_names(aoa.asv.physeq)
aoa.meta.physeq <- sample_data(meta_micro)# meta data
sample_names(aoa.meta.physeq)
# read the rooted tree
setwd('/Users/arifinabintarti/Documents/France/microservices/030423_AOA_out/AOA-rooted-tree/')
#setwd('D:/Fina/INRAE_Project/microservices/030423_AOA_out/AOA-rooted-tree/')
AOA_rooted_tree <- ape::read.tree("tree.nwk")
# make phyloseq object
aoa.physeq <- merge_phyloseq(aoa.asv.physeq,aoa.tax.physeq,aoa.meta.physeq,AOA_rooted_tree)
aoa.physeq
sample_data(aoa.physeq)$SampleID <- paste0("S", sample_data(aoa.physeq)$SampleID)
sample_data(aoa.physeq)
# rarefy to minimum sequencing depth (minimum reads = 3832 reads)
set.seed(13)
aoa.rare.min.physeq <- rarefy_even_depth(aoa.physeq, sample.size = min(sample_sums(aoa.physeq)),
rngseed = 13, replace = FALSE, trimOTUs = TRUE, verbose = TRUE)
aoa.rare.min.physeq
sort(sample_sums(aoa.rare.min.physeq), decreasing = F) # 54 OTUs were removed because they are no longer present in any sample after random subsampling
# no sample removed
sort(rowSums(otu_table(aoa.rare.min.physeq), na.rm = FALSE, dims = 1), decreasing = F)
colSums(otu_table(aoa.rare.min.physeq))
aoarare.asv.df <- as.data.frame(otu_table(aoa.rare.min.physeq))
dim(aoarare.asv.df) # 592 ASVs, 192 samples
aoarare.asv.df_pa <- 1*(aoarare.asv.df>0)
aoa.s <- specnumber(aoarare.asv.df, MARGIN = 2) # richness
aoa.richness <- as.data.frame(aoa.s)
aoa.h <- diversity(t(aoarare.asv.df), index = 'shannon') # Shannon index
aoa.shannon <- as.data.frame(aoa.h)
aoa.d <- diversity(t(aoarare.asv.df), index = 'simpson') # Simpson index
aoa.simpson <- as.data.frame(aoa.d)
aoa.inv.d <- diversity(t(aoarare.asv.df), index = 'invsimpson')
aoa.meta.df <- data.frame(meta_micro)
aoa.meta.df$Richness <- aoa.s
aoa.meta.df$Shannon <- aoa.h
aoa.meta.df$Simpson <- aoa.d
aoa.meta.df$InvSimpson <- aoa.inv.d
#aob.min.meta.df$Date  <- as.Date(aob.min.meta.df$Date , "%m/%d/%Y")
str(aoa.meta.df)
aoa.meta.df$Type <- factor(aoa.meta.df$Type, levels = c("BS", "RS"),
labels = c("Bulk Soil", "Rhizosphere"))
aoa.meta.df$Treatment <- factor(aoa.meta.df$Treatment, levels = c("D", "K", "M"),
labels = c("BIODYN", "CONFYM", "CONMIN"))
aoa.meta.df$SampleID<-as.factor(aoa.meta.df$SampleID)
aoa.meta.df$PlotID<-as.factor(aoa.meta.df$PlotID)
aoa.meta.df$Irrigation<-as.factor(aoa.meta.df$Irrigation)
aoa.meta.df$Block<-as.factor(aoa.meta.df$Block)
aoa.meta.df$x<-as.factor(aoa.meta.df$x)
aoa.meta.df$var<-as.factor(aoa.meta.df$var)
aoa.meta.df$var2<-as.factor(aoa.meta.df$var2)
aoa.meta.df$var3<-as.factor(aoa.meta.df$var3)
aoa.meta.df[sapply(aoa.meta.df, is.character)] <-
lapply(aoa.meta.df[sapply(aoa.meta.df, is.character)], as.numeric)
aoa.meta.df[sapply(aoa.meta.df, is.integer)] <-
lapply(aoa.meta.df[sapply(aoa.meta.df, is.integer)], as.numeric)
# tidy up the data frame
aoa.meta.df.tidy <- aoa.meta.df %>%
group_by(Irrigation, Treatment, Date, Type, var2,var3) %>%
summarize(Mean.Rich=mean(Richness),
Mean.Sha=mean(Shannon),
Mean.Simp=mean(Simpson),
Mean.invsimp=mean(InvSimpson))
colSums(otu_table(aoa.rare.min.physeq))
aoarare.asv.df <- as.data.frame(otu_table(aoa.rare.min.physeq))
dim(aoarare.asv.df) # 592 ASVs, 192 samples
aoarare.asv.df_pa <- 1*(aoarare.asv.df>0)
aoa.s <- specnumber(aoarare.asv.df, MARGIN = 2) # richness
aoa.richness <- as.data.frame(aoa.s)
aoa.h <- diversity(t(aoarare.asv.df), index = 'shannon') # Shannon index
aoa.shannon <- as.data.frame(aoa.h)
aoa.d <- diversity(t(aoarare.asv.df), index = 'simpson') # Simpson index
aoa.simpson <- as.data.frame(aoa.d)
aoa.inv.d <- diversity(t(aoarare.asv.df), index = 'invsimpson')
str(aoa.meta.df)
aoa.meta.df$Type <- factor(aoa.meta.df$Type, levels = c("BS", "RS"),
labels = c("Bulk Soil", "Rhizosphere"))
aoa.meta.df$Treatment <- factor(aoa.meta.df$Treatment, levels = c("D", "K", "M"),
labels = c("BIODYN", "CONFYM", "CONMIN"))
aoa.meta.df$SampleID<-as.factor(aoa.meta.df$SampleID)
aoa.meta.df$PlotID<-as.factor(aoa.meta.df$PlotID)
aoa.meta.df$Irrigation<-as.factor(aoa.meta.df$Irrigation)
aoa.meta.df$Block<-as.factor(aoa.meta.df$Block)
aoa.meta.df$x<-as.factor(aoa.meta.df$x)
aoa.meta.df$var<-as.factor(aoa.meta.df$var)
aoa.meta.df$var2<-as.factor(aoa.meta.df$var2)
aoa.meta.df$var3<-as.factor(aoa.meta.df$var3)
aoa.meta.df[sapply(aoa.meta.df, is.character)] <-
lapply(aoa.meta.df[sapply(aoa.meta.df, is.character)], as.numeric)
aoa.meta.df[sapply(aoa.meta.df, is.integer)] <-
lapply(aoa.meta.df[sapply(aoa.meta.df, is.integer)], as.numeric)
# tidy up the data frame
aoa.meta.df.tidy <- aoa.meta.df %>%
group_by(Irrigation, Treatment, Date, Type, var2,var3) %>%
summarise(Mean.Rich=mean(Richness),
Mean.Sha=mean(Shannon),
Mean.Simp=mean(Simpson),
Mean.invsimp=mean(InvSimpson))
# 1. Richness
detach("package:plyr", unload=TRUE)
if("dplyr" %in% (.packages())){
detach("package:dplyr", unload=TRUE)
detach("package:plyr", unload=TRUE)
}
library(plyr)
library(dplyr)
# tidy up the data frame
aoa.meta.df.tidy <- aoa.meta.df %>%
group_by(Irrigation, Treatment, Date, Type, var2,var3) %>%
summarise(Mean.Rich=mean(Richness),
Mean.Sha=mean(Shannon),
Mean.Simp=mean(Simpson),
Mean.invsimp=mean(InvSimpson))

library(devtools)
library(dada2)
library(ShortRead)
library(Biostrings)
updateR()
response=rnbinom(768,size=0.5,mu=2)
treatment=factor(rep(c("one","two","three","four"),times=192))
covariate=rnbinom(768,size=.01,mu=4)
date=factor(rep(1:12,each=64))
plotID=factor(rep(c("P1","P2","P3","P4","P5","P6","P7","P8","P9","P10","P11",
"P12","P13","P14","P15","P16"),each=4,times=12))
response
treatment
plotID
dat1= data.frame(response, treatment, covariate, date, plotID)
View(dat1)
data(irrigation, package = "faraway")
install.packages("faraway")
library(faraway)
data(irrigation, package = "faraway")
summary(irrigation)
View(faraway)
View(irrigation)
library(multcomp)
library(car)
# Install packages
install.packages(c('vegan', 'tidyverse'))
install.packages('reshape')
# Install packages
install.packages("Rtools")
library(multcomp)
library(car)
library(BiocManager)
library(vegan)
library(plyr)
library(multcomp)
library(car)
library(BiocManager)
library(vegan)
library(plyr)
library(dplyr)
library(tidyverse)
library(tidyr)
library(ggplot2)
library(ggtext)
library(reshape)
library(ggpubr)
library(car)
library(agricolae)
library(multcompView)
library(grid)
library(gridExtra)
library(sjmisc)
library(sjPlot)
library(MASS)
library(FSA)
library(rcompanion)
library(onewaytests)
library(ggsignif)
library(PerformanceAnalytics)
library(gvlma)
library(ggpmisc)
library(tibble)
library(fitdistrplus)
library(lme4)
library(nlme)
library(ape)
library(multcomp)
library(car)
library(BiocManager)
library(vegan)
library(plyr)
library(dplyr)
library(tidyverse)
library(tidyr)
library(ggplot2)
library(ggtext)
library(reshape)
library(ggpubr)
library(car)
library(agricolae)
library(multcompView)
library(grid)
library(gridExtra)
library(sjmisc)
library(sjPlot)
library(MASS)
library(FSA)
library(rcompanion)
library(sjPlot)
library(MASS)
library(FSA)
library(rcompanion)
library(onewaytests)
library(ggsignif)
library(PerformanceAnalytics)
library(gvlma)
library(ggpmisc)
library(tibble)
library(fitdistrplus)
library(lme4)
library(nlme)
library(ape)
install.packages("sjPlot")
library(sjPlot)
install.packages("sjPlot")
library(sjPlot)
library(multcomp)
# Install packages
install.packages(c('vegan', 'tidyverse'))
install.packages('reshape')
install.packages("ggpubr")
install.packages("car")
install.packages("agricolae")
install.packages("multcompView")
library(devtools)
library(multcomp)
library(car)
library(BiocManager)
library(vegan)
library(plyr)
library(dplyr)
library(tidyverse)
library(tidyr)
library(ggplot2)
library(ggtext)
library(reshape)
library(ggpubr)
library(car)
library(agricolae)
library(multcompView)
library(grid)
library(gridExtra)
library(sjmisc)
library(sjPlot)
library(MASS)
library(FSA)
library(rcompanion)
library(onewaytests)
library(ggsignif)
library(PerformanceAnalytics)
library(gvlma)
library(ggpmisc)
library(tibble)
library(fitdistrplus)
library(lme4)
library(nlme)
library(ape)
library(phyloseq)
# SET THE WORKING DIRECTORY
setwd('/Users/arifinabintarti/Documents/France/microservices/070623_AOB_out/AOB.ASV-analysis')
setwd('D:/Fina/INRAE_Project/microservices/070623_AOB_out/AOB.ASV-analysis')
wd <- print(getwd())
# load the asv table
aob.asv <- read.table('annotated.AOB.ASVs.counts.tsv', sep='\t', header=T, row.names = 1, check.names = FALSE)
setwd('D:/Fina/INRAE_Project/microservices/070623_AOB_out')
write.csv(aob.asv, file = "aob.asv.csv")
aob.asv
dim(aob.asv)# 1338  192
sort(colSums(aob.asv, na.rm = FALSE, dims = 1), decreasing = F) # there are no asv that does not exist in at least one sample.
# load the taxonomy table
setwd('/Users/arifinabintarti/Documents/France/microservices/070623_AOB_out/')
setwd('D:/Fina/INRAE_Project/microservices/070623_AOB_out')
aob.tax <- read.csv("besthit.diamond.output.curateddb.AOB.ASVs.csv")
dim(aob.tax) # 1338
# load the metadata
setwd('/Users/arifinabintarti/Documents/France/microservices/')
setwd('D:/Fina/INRAE_Project/microservices')
meta_micro <- read.csv("meta_microservices.csv")
# load phylogenetic tree (nwk file)
setwd('/Users/arifinabintarti/Documents/France/microservices/070623_AOB_out/AOB.Phylogenetic-analysis/')
setwd('D:/Fina/INRAE_Project/microservices/070623_AOB_out/AOB.Phylogenetic-analysis')
aob.tre <- ape::read.tree("tree.AOB.nwk")
############################################################################
# rarefaction curve
set.seed(13)
rarecurve(t(aob.asv), step=50, cex=0.5, lwd=2, ylab="ASV", label=F)
# re-order the rownames of the asv table to match the colnames of the metadata.
re_order <- match(rownames(meta_micro), colnames(aob.asv))
aob.asv.ord  <- aob.asv[ ,re_order]
aob.asv.physeq = otu_table(aob.asv.ord, taxa_are_rows = TRUE) # asv table
sample_names(aob.asv.physeq)
# adding "S" for sample names to avoid possible problem later on
sample_names(aob.asv.physeq) <- paste0("S", sample_names(aob.asv.physeq))
# phyloseq object of the taxonomy table
aob.tax <- column_to_rownames(aob.tax, var = "ASVid")
aob.tax.physeq = tax_table(as.matrix(aob.tax)) # taxonomy table
# phyloseq object of the metadata
str(meta_micro)
meta_micro$Date <- factor(meta_micro$Date, levels = c("4/28/22", "06/01/2022", "07/05/2022", "7/20/22", "9/13/22"),
labels = c("04-28-22", "06-01-22", "07-05-22", "07-20-22", "09-13-22"))
rownames(meta_micro) <- sample_names(aob.asv.physeq)
aob.meta.physeq <- sample_data(meta_micro)# meta data
sample_names(aob.meta.physeq)
# read the rooted tree
setwd('/Users/arifinabintarti/Documents/France/microservices/070623_AOB_out/AOB-rooted-tree/')
setwd('D:/Fina/INRAE_Project/microservices/070623_AOB_out/AOB-rooted-tree/')
AOB_rooted_tree <- ape::read.tree("tree.nwk")
AOB_rooted_tree
# tree visualization
library("treeio")
library("ggtree")
p <- ggtree(AOB_rooted_tree, layout = "circular") +
geom_tiplab(size=3, color="purple")
p
# make phyloseq object
aob.physeq <- merge_phyloseq(aob.asv.physeq,aob.tax.physeq,aob.meta.physeq,AOB_rooted_tree)
aob.physeq
aob.asv.ord <- as.data.frame(otu_table(aob.physeq))
aob.asv.ord
#write.csv(aob.asv.ord, file = "aob.asv.ord.csv")
sample_data(aob.physeq)$SampleID <- paste0("S", sample_data(aob.physeq)$SampleID)
sample_data(aob.physeq)
# run the ggrare function attached in the file "generating_rarecurve.r"
set.seed(13)
aob.rare <- ggrare(aob.physeq, step = 1, color = "Type", label = "SampleID", se = FALSE)
#set up your own color palette
install.packages("colorBlindness")
library(colorBlindness)
displayAvailablePalette(color="white")
#Palette <- c("#1F968BFF","#FDE725FF")
PairedColor12Steps
Brown2Blue10Steps
Palette <- c("#FF7F00", "#662F00")
names(Palette) <- levels(sample_data(aob.physeq)$Type)
Palette
legend_title <- "Sample Type"
library(ggtext)
# ASV Table
sort(colSums(aob.asv, na.rm = FALSE, dims = 1), decreasing = F)
set.seed(333)
aob.rare.1282.seq <- rarefy_even_depth(aob.physeq, sample.size = 1282,
rngseed = 333, replace = FALSE, trimOTUs = TRUE, verbose = TRUE)
aob.rare.1282.seq # 1 samples removed (S11), 116 ASVs were removed
sort(rowSums(otu_table(aob.rare.1282.seq), na.rm = FALSE, dims = 1), decreasing = F)
aob.rare.1282.seq
# bulk soil only
aob.physeq_bulk <- subset_samples(aob.rare.1282.seq, Type=="BS")
aob.physeq_bulk
aob.physeq_bulk1 <- prune_taxa(taxa_sums(aob.physeq_bulk)>0, aob.physeq_bulk)
aob.physeq_bulk1 # 937 taxa, 119 samples
# subset the data by date
# 1. 04/28/22
aob.seqT1 <- subset_samples(aob.physeq_bulk1, Date=="04-28-22")
aob.seqT1
aob.seqT1.1 <- prune_taxa(taxa_sums(aob.seqT1)>0, aob.seqT1)
sort(rowSums(otu_table(aob.seqT1.1), na.rm = FALSE, dims = 1), decreasing = F)
aob.seqT1.1 # 393 taxa
###############################################################################
# Filter low-abundant taxa
# keeping OTUs with at least 0.01 % relative abundance across all samples
physeq.subset <- aob.seqT1.1
physeq.subset
data.obs <- as.data.frame(otu_table(physeq.subset))
keep.taxa.id=which((rowSums(data.obs)/sum(data.obs))>0.0001)
data.F=data.obs[keep.taxa.id,,drop=FALSE]
new.otu <- as.matrix(data.F) # convert it into a matrix.
new.otu <- otu_table(data.F, taxa_are_rows = TRUE) # convert into phyloseq compatible file.
otu_table(physeq.subset) <- new.otu # incorporate into phyloseq Object
physeq.subset # 316 TAXA
################################################################################
#Lets generate a prevalence table (number of samples each taxa occurs in) for each taxa.
prevalencedf = apply(X = otu_table(physeq.subset),
MARGIN = 1,
FUN = function(x){sum(x > 0)})
# Add taxonomy and total read counts to this data.frame
prevalencedf = data.frame(Prevalence = prevalencedf,
TotalAbundance = taxa_sums(physeq.subset))
prevalencedf[1:10,]
dim(prevalencedf)
# calculate prevalence
ps = physeq.subset
df_tmp <- psmelt(ps)
df_tmp$sample <- 0
df_tmp$sample[df_tmp$Abundance > 0] <- 1 #E: DON'T UNDERSTAND WHY THIS IS DONE
df_otu_prev_ttt <- data.frame(matrix(ncol=nlevels(as.factor(df_tmp$Treatment)),
nrow=nlevels(as.factor(df_tmp$OTU)),
dimnames=list(levels(as.factor(df_tmp$OTU)),
levels(as.factor(df_tmp$Treatment)))))
#attention il ya Sample et sample
for (i in unique(df_tmp$OTU)) {
for (j in unique(df_tmp$Treatment)) {
df_otu_prev_ttt[i,j] <- sum(df_tmp$sample[df_tmp$OTU == i & df_tmp$Treatment == j],na.rm = T) / nrow(df_tmp[df_tmp$OTU == i & df_tmp$Treatment == j,]) *100
print(paste(i,j,df_otu_prev_ttt[i,j]),sep="\t")
#print(df_otu_prev_ttt[i,j])
}
}
df_otu_prev_ttt$max_prev <- apply(df_otu_prev_ttt,MARGIN=1, FUN=max)
# filter otu par prevalence
physeq.subset
ps =  physeq.subset
df_prev = df_otu_prev_ttt
tmp_otu_F = rownames(df_prev[df_prev$max_prev >= 60,])
physeq.subset.75 <- prune_taxa(taxa_names(ps) %in% tmp_otu_F, ps)
rm(ps,df_prev,tmp_otu_F)
physeq.subset.75  # 54 taxa
####################################################
# DIFFERENTIAL ABUNDANCE
##################################################
#install.packages("glmmTMB")
library(glmmTMB)
####################################################
# DIFFERENTIAL ABUNDANCE
##################################################
#install.packages("glmmTMB")
install.packages('TMB', type = 'source')
install.packages("TMB", type = "source")
####################################################
# DIFFERENTIAL ABUNDANCE
##################################################
#install.packages("glmmTMB")
install.packages('TMB', type = 'source')
library(TMB)
library(glmmTMB)
####################################################
# DIFFERENTIAL ABUNDANCE
##################################################
install.packages("glmmTMB")
install.packages("glmmTMB")
library(glmmTMB)
####################################################
# DIFFERENTIAL ABUNDANCE
##################################################
install.packages("glmmTMB", type="source")
install.packages("glmmTMB", type = "source")

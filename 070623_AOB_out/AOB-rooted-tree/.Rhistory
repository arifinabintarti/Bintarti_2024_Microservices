legend_title <- "Sample Type"
# plot after rarefaction
library(ggtext)
plot.com.rare.min <- com.rare.min +
theme_bw()+
scale_color_manual(legend_title,values = Palette, labels = c("Bulk Soil", "Rhizosphere"))+
scale_size_manual(values = 60)+
labs(title = "(b) AOA", )+
theme( strip.text.x = element_text(size=14, face='bold'),
axis.text.x=element_text(size = 14),
axis.text.y = element_text(size = 14),
strip.text.y = element_text(size=18, face = 'bold'),
plot.title = element_text(size =20 ,face='bold'),
axis.title.y = element_text(size=15,face="bold"),
axis.title.x = element_text(size=15,face="bold"),
legend.position = "right",
legend.title = element_text(size=15),
legend.text = element_text(size = 13),
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
ylab("Number of ASVs") + xlab("Reads")
plot.com.rare.min <- com.rare.min +
theme_bw()+
scale_color_manual(legend_title,values = Palette, labels = c("Bulk Soil", "Rhizosphere"))+
scale_size_manual(values = 60)+
labs(title = "(c) COMAMMOX", )+
theme( strip.text.x = element_text(size=14, face='bold'),
axis.text.x=element_text(size = 14),
axis.text.y = element_text(size = 14),
strip.text.y = element_text(size=18, face = 'bold'),
plot.title = element_text(size =20 ,face='bold'),
axis.title.y = element_text(size=15,face="bold"),
axis.title.x = element_text(size=15,face="bold"),
legend.position = "right",
legend.title = element_text(size=15),
legend.text = element_text(size = 13),
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
ylab("Number of ASVs") + xlab("Reads")
plot.com.rare.min
setwd('D:/Fina/INRAE_Project/microservices_fig/COM/')
ggsave("COM_rarecurve_min.tiff",
plot.com.rare.min, device = "tiff",
width = 10, height = 7,
units= "in", dpi = 600)
colSums(otu_table(com.rare.min.physeq))
com.rare.asv.df <- as.data.frame(otu_table(com.rare.min.physeq))
dim(com.rare.asv.df) # 592 ASVs, 192 samples
com.rare.asv.df_pa <- 1*(com.rare.asv.df>0)
com.s <- specnumber(com.rare.asv.df, MARGIN = 2) # richness
com.richness <- as.data.frame(com.s)
com.h <- diversity(t(com.rare.asv.df), index = 'shannon') # Shannon index
com.shannon <- as.data.frame(com.h)
com.d <- diversity(t(com.rare.asv.df), index = 'simpson') # Simpson index
com.simpson <- as.data.frame(com.d)
com.inv.d <- diversity(t(com.rare.asv.df), index = 'invsimpson')
# Line plot of COM richness
com.meta.df <- data.frame(meta_micro_sub)
com.meta.df$Richness <- com.s
com.rare.min.physeq
View(meta_micro_sub)
# rarefy to minimum sequencing depth (minimum reads =  reads)
set.seed(13)
com.rare.min.physeq <- rarefy_even_depth(com.physeq, sample.size = 5242,
rngseed = 13, replace = FALSE, trimOTUs = TRUE, verbose = TRUE)
# Line plot of COM richness
meta_micro_sub <- meta_micro_sub[-52,]
View(meta_micro)
# Line plot of COM richness
meta_micro_sub <- meta_micro_sub %>% filter(SampleID != 52)
meta_micro <- read.csv("meta_microservices.csv")
setwd('D:/Fina/INRAE_Project/microservices/')
meta_micro <- read.csv("meta_microservices.csv")
# remove the bad sample (sample # 26) from the metadata
meta_micro_sub <- meta_micro[-26,]
setwd('D:/Fina/INRAE_Project/microservices/')
meta_micro <- read.csv("meta_microservices.csv")
# remove the bad sample (sample # 26) from the metadata
meta_micro_sub <- meta_micro[-26,]
library(devtools)
library(multcomp)
library(car)
library(BiocManager)
library(vegan)
library(plyr)
library(dplyr)
library(tidyverse)
library(tidyr)
library(ggplot2)
library(ggtext)
library(reshape)
library(ggpubr)
library(car)
library(agricolae)
library(multcompView)
library(grid)
library(gridExtra)
library(sjmisc)
library(sjPlot)
library(MASS)
library(FSA)
library(rcompanion)
library(onewaytests)
library(ggsignif)
library(PerformanceAnalytics)
library(gvlma)
library(ggpmisc)
library(tibble)
library(fitdistrplus)
library(lme4)
library(nlme)
library(ape)
library(devtools)
library(multcomp)
library(car)
library(BiocManager)
library(vegan)
library(plyr)
library(dplyr)
library(tidyverse)
library(tidyr)
library(ggplot2)
library(ggtext)
library(reshape)
library(ggpubr)
library(car)
library(agricolae)
library(multcompView)
library(grid)
library(gridExtra)
library(sjmisc)
library(sjPlot)
library(MASS)
library(FSA)
library(rcompanion)
library(onewaytests)
library(ggsignif)
library(PerformanceAnalytics)
library(gvlma)
library(ggpmisc)
library(tibble)
library(fitdistrplus)
library(lme4)
library(nlme)
library(ape)
# SET THE WORKING DIRECTORY
setwd('/Users/arifinabintarti/Documents/France/microservices/070623_AOB_out/AOB.ASV-analysis')
setwd('D:/Fina/INRAE_Project/microservices/070623_AOB_out/AOB.ASV-analysis')
wd <- print(getwd())
# load the asv table
aob.asv <- read.table('annotated.AOB.ASVs.counts.tsv', sep='\t', header=T, row.names = 1, check.names = FALSE)
dim(aob.asv) # 1338  192
sort(colSums(aob.asv, na.rm = FALSE, dims = 1), decreasing = F) # there are no asv that does not exist in at least one sample.
# load the taxonomy table
setwd('/Users/arifinabintarti/Documents/France/microservices/070623_AOB_out/')
setwd('D:/Fina/INRAE_Project/microservices/070623_AOB_out')
aob.tax <- read.csv("besthit.diamond.output.curateddb.AOB.ASVs.csv")
dim(aob.tax) # 1338
# load the metadata
setwd('/Users/arifinabintarti/Documents/France/microservices/')
setwd('D:/Fina/INRAE_Project/microservices')
meta_micro <- read.csv("meta_microservices.csv")
# load phylogenetic tree (nwk file)
setwd('/Users/arifinabintarti/Documents/France/microservices/070623_AOB_out/AOB.Phylogenetic-analysis/')
setwd('D:/Fina/INRAE_Project/microservices/070623_AOB_out/AOB.Phylogenetic-analysis')
aob.tre <- ape::read.tree("tree.AOB.nwk")
############################################################################
# rarefaction curve
set.seed(13)
rarecurve(t(aob.asv), step=50, cex=0.5, lwd=2, ylab="ASV", label=F)
re_order <- match(rownames(meta_micro), colnames(aob.asv))
aob.asv.ord  <- aob.asv[ ,re_order]
aob.asv.physeq = otu_table(aob.asv.ord, taxa_are_rows = TRUE) # asv table
#BiocManager::install("phyloseq")
library(phyloseq)
re_order <- match(rownames(meta_micro), colnames(aob.asv))
aob.asv.ord  <- aob.asv[ ,re_order]
aob.asv.physeq = otu_table(aob.asv.ord, taxa_are_rows = TRUE) # asv table
sample_names(aob.asv.physeq)
# adding "S" for sample names to avoid possible problem later on
sample_names(aob.asv.physeq) <- paste0("S", sample_names(aob.asv.physeq))
# phyloseq object of the taxonomy table
aob.tax <- column_to_rownames(aob.tax, var = "ASVid")
aob.tax.physeq = tax_table(as.matrix(aob.tax)) # taxonomy table
# phyloseq object of the metadata
meta_micro$Date <- factor(meta_micro$Date, levels = c("4/28/22", "6/1/22", "7/5/22", "7/20/22", "9/13/22"),
labels = c("04-28-22", "06-01-22", "07-05-22", "07-20-22", "09-13-22"))
rownames(meta_micro) <- sample_names(aob.asv.physeq)
aob.meta.physeq <- sample_data(meta_micro)# meta data
sample_names(aob.meta.physeq)
# read the rooted tree
setwd('/Users/arifinabintarti/Documents/France/microservices/070623_AOB_out/AOB-rooted-tree/')
setwd('D:/Fina/INRAE_Project/microservices/070623_AOB_out/AOB-rooted-tree/')
AOB_rooted_tree <- ape::read.tree("tree.nwk")
# make phyloseq object
aob.physeq <- merge_phyloseq(aob.asv.physeq,aob.tax.physeq,aob.meta.physeq,AOB_rooted_tree)
aob.physeq
sample_data(aob.physeq)$SampleID <- paste0("S", sample_data(aob.physeq)$SampleID)
sample_data(aob.physeq)
# run the ggrare function attached in the file "generating_rarecurve.r"
set.seed(13)
aob.rare <- ggrare(aob.physeq, step = 1, color = "Type", label = "SampleID", se = FALSE)
#set up your own color palette
install.packages("colorBlindness")
library(colorBlindness)
displayAvailablePalette(color="white")
# ASV Table
sort(colSums(aob.asv, na.rm = FALSE, dims = 1), decreasing = F)
set.seed(333)
aob.rare.1282.seq <- rarefy_even_depth(aob.physeq, sample.size = 1282,
rngseed = 333, replace = FALSE, trimOTUs = TRUE, verbose = TRUE)
aob.rare.1282.seq # 1 samples removed (S11), 116 ASVs were removed
sort(rowSums(otu_table(aob.rare.1282.seq), na.rm = FALSE, dims = 1), decreasing = F)
# 1. BULK SOIL
aob.physeq_bulk <- subset_samples(aob.rare.1282.seq, Type=="BS")
aob.physeq_bulk
aob.physeq_bulk1 <- prune_taxa(taxa_sums(aob.physeq_bulk)>0, aob.physeq_bulk)
aob.physeq_bulk1
M04seq<- subset_samples(aob.physeq_bulk1, Date=="04-28-22" & Treatment=="M")
M04seq1 <- prune_taxa(taxa_sums(M04seq)>0, M04seq)
sort(rowSums(otu_table(M04seq1), na.rm = FALSE, dims = 1), decreasing = F)
# 2. BIODYNAMIC
D04seq<- subset_samples(aob.physeq_bulk1, Date=="04-28-22" & Treatment=="D")
D04seq1 <- prune_taxa(taxa_sums(D04seq)>0, D04seq)
# 3. CONVENTIONAL
K04seq<- subset_samples(aob.physeq_bulk1, Date=="04-28-22" & Treatment=="K")
K04seq1 <- prune_taxa(taxa_sums(K04seq)>0, K04seq)
# Date: 06-01-2022
# 1. MINERAL
M06seq<- subset_samples(aob.physeq_bulk1, Date=="06-01-22" & Treatment=="M")
M06seq1 <- prune_taxa(taxa_sums(M06seq)>0, M06seq)
# 2. BIODYNAMIC
D06seq<- subset_samples(aob.physeq_bulk1, Date=="06-01-22" & Treatment=="D")
D06seq1 <- prune_taxa(taxa_sums(D06seq)>0, D06seq)
# 3. CONVENTIONAL
K06seq<- subset_samples(aob.physeq_bulk1, Date=="06-01-22" & Treatment=="K")
K06seq1 <- prune_taxa(taxa_sums(K06seq)>0, K06seq)
# Date: 07-05-2022
# 1. MINERAL
M0705seq<- subset_samples(aob.physeq_bulk1, Date=="07-05-22" & Treatment=="M")
M0705seq1 <- prune_taxa(taxa_sums(M0705seq)>0, M0705seq)
# 2. BIODYNAMIC
D0705seq<- subset_samples(aob.physeq_bulk1, Date=="07-05-22" & Treatment=="D")
D0705seq1 <- prune_taxa(taxa_sums(D0705seq)>0, D0705seq)
# 3. CONVENTIONAL
K0705seq<- subset_samples(aob.physeq_bulk1, Date=="07-05-22" & Treatment=="K")
K0705seq1 <- prune_taxa(taxa_sums(K0705seq)>0, K0705seq)
# Date: 07-20-2022
# 1. MINERAL
M0720seq<- subset_samples(aob.physeq_bulk1, Date=="07-20-22" & Treatment=="M")
M0720seq1 <- prune_taxa(taxa_sums(M0720seq)>0, M0720seq)
# 2. BIODYNAMIC
D0720seq<- subset_samples(aob.physeq_bulk1, Date=="07-20-22" & Treatment=="D")
D0720seq1 <- prune_taxa(taxa_sums(D0720seq)>0, D0720seq)
# 3. CONVENTIONAL
K0720seq<- subset_samples(aob.physeq_bulk1, Date=="07-20-22" & Treatment=="K")
K0720seq1 <- prune_taxa(taxa_sums(K0720seq)>0, K0720seq)
# Date: 09-13-2022
# 1. MINERAL
M09seq<- subset_samples(aob.physeq_bulk1, Date=="09-13-22" & Treatment=="M")
M09seq1 <- prune_taxa(taxa_sums(M09seq)>0, M09seq)
# 2. BIODYNAMIC
D09seq<- subset_samples(aob.physeq_bulk1, Date=="09-13-22" & Treatment=="D")
D09seq1 <- prune_taxa(taxa_sums(D09seq)>0, D09seq)
# 3. CONVENTIONAL
K09seq<- subset_samples(aob.physeq_bulk1, Date=="09-13-22" & Treatment=="K")
K09seq1 <- prune_taxa(taxa_sums(K09seq)>0, K09seq)
library(file2meco)
library(microeco)
library(magrittr)
library(ggplot2)
library(MicrobiotaProcess)
library(file2meco)
library(microeco)
library(magrittr)
library(ggplot2)
library(MicrobiotaProcess)
BiocManager::install("MicrobiotaProcess")
library(MicrobiotaProcess)
library(UpSetR)
library(paletteer)
# to create the upsetR plot
# replace Genotype with your variable or variables and sets with the levels of your variable
upsetda <- get_upset(aob.rare.1282.seq, factorNames="Irrigation")
View(upsetda)
# to create the upsetR plot
# replace Genotype with your variable or variables and sets with the levels of your variable
upsetda <- get_upset(M04seq1, factorNames="Irrigation")
View(upsetda)
upset(upsetda, sets=c("Control","Rainout"), sets.bar.color = "#56B4E9",
order.by = "freq", keep.order=T,empty.intersections = "on",nintersects = 21)
# to create the upsetR plot
# replace Genotype with your variable or variables and sets with the levels of your variable
upsetda <- get_upset(aob.rare.1282.seq, factorNames="Irrigation")
upset(upsetda, sets=c("Control","Rainout"), sets.bar.color = "#56B4E9",
order.by = "freq", keep.order=T,empty.intersections = "on",nintersects = 21)
# to create the upsetR plot
# replace Genotype with your variable or variables and sets with the levels of your variable
upsetda <- get_upset(aob.rare.1282.seq, factorNames="Treatment")
upset(upsetda, sets=c("D","K", "M"), sets.bar.color = "#56B4E9",
order.by = "freq", keep.order=T,empty.intersections = "on",nintersects = 21)
# to create the upsetR plot
# replace Genotype with your variable or variables and sets with the levels of your variable
upsetda <- get_upset(aob.rare.1282.seq, factorNames="x")
# to create the upsetR plot
# replace Genotype with your variable or variables and sets with the levels of your variable
upsetda <- get_upset(aob.rare.1282.seq, factorNames="x")
upset(upsetda, sets=c("cont.D","cont.K", "cont.M","rain.D","rain.K", "rain.M"), sets.bar.color = "#56B4E9",
order.by = "freq", keep.order=T,empty.intersections = "on",nintersects = 21)
# I have my data in a phyloseq object called physeq
dataset<-phyloseq2meco(aob.rare.1282.seq)
dataset
dataset$sample_table$x
# from here, it will do several things, creating a similar plot (that will not be used because I like more the other one)
tmp <- dataset$merge_samples(use_group = "x")
View(tmp)
t1 <- trans_venn$new(dataset = tmp)
t1
#This number needs to be adjusted depending on how many intersections are shown
t1$data_summary %<>% .[.[, 1] > 28, ]
t1$data_summary
# I will not use the plot but it will be used to know that the order of the intersects is correct
p1<-t1$plot_bar()
p1
t2 <- t1$trans_comm(use_frequency = F)
# t2 is a new microtable class, each part is considered a sample
class(t2)
t2$cal_abund()
#sorting
t2$taxa_abund$Rank2<-t2$taxa_abund$Rank2[,row.names(t1$data_summary)]
# transform and plot
t3 <- trans_abund$new(dataset = t2, taxrank = "Rank2",ntaxa = 12)
BiocManager::install("ANCOMBC")
library(ANCOMBC)
library(tidyverse)
library(DT)
data(atlas1006, package = "microbiome")
BiocManager::install("microbiome")
library(microbiome)
data(atlas1006, package = "microbiome")
View(atlas1006)
atlas1006
otu_table(atlas1006)
head(otu_table(atlas1006))
tse = mia::makeTreeSummarizedExperimentFromPhyloseq(atlas1006)
tse
atlas1006
# subset to baseline
tse = tse[, tse$time == 0]
tse
tse$`Escherichia coli et rel.`
tse$bmi_group
# Re-code the bmi group
tse$bmi = recode(tse$bmi_group,
obese = "obese",
severeobese = "obese",
morbidobese = "obese")
tse$bmi
tse = tse[, tse$bmi %in% c("lean", "overweight", "obese")]
tse
# Note that by default, levels of a categorical variable in R are sorted
# alphabetically. In this case, the reference level for `bmi` will be
# `lean`. To manually change the reference level, for instance, setting `obese`
# as the reference level, use:
tse$bmi = factor(tse$bmi, levels = c("obese", "overweight", "lean"))
# You can verify the change by checking:
levels(sample_data(tse)$bmi)
# You can verify the change by checking:
levels(sample_data(tse)$bmi)
# You can verify the change by checking:
levels(sam_data(tse)$bmi)
# Create the region variable
tse$region = recode(as.character(tse$nationality),
Scandinavia = "NE", UKIE = "NE", SouthEurope = "SE",
CentralEurope = "CE", EasternEurope = "EE",
.missing = "unknown")
# Discard "EE" as it contains only 1 subject
# Discard subjects with missing values of region
tse = tse[, ! tse$region %in% c("EE", "unknown")]
print(tse)
out = ancombc(data = tse, assay_name = "counts",
tax_level = "Family", phyloseq = NULL,
formula = "age + region + bmi",
p_adj_method = "holm", prv_cut = 0.10, lib_cut = 1000,
group = "bmi", struc_zero = TRUE, neg_lb = TRUE, tol = 1e-5,
max_iter = 100, conserve = TRUE, alpha = 0.05, global = TRUE,
n_cl = 1, verbose = TRUE)
out = ancombc2(data = tse, assay_name = "counts",
tax_level = "Family", phyloseq = NULL,
formula = "age + region + bmi",
p_adj_method = "holm", prv_cut = 0.10, lib_cut = 1000,
group = "bmi", struc_zero = TRUE, neg_lb = TRUE, tol = 1e-5,
max_iter = 100, conserve = TRUE, alpha = 0.05, global = TRUE,
n_cl = 1, verbose = TRUE)
out = ancombc2(data = tse, assay_name = "counts",
tax_level = "Family",
fix_formula = "age + region + bmi",
rand_formula = NULL,
p_adj_method = "holm",
prv_cut = 0.10,
lib_cut = 1000,
s0_perc = 0.05,
group = "bmi",
struc_zero = TRUE,
neg_lb = TRUE,
alpha = 0.05,
n_cl = 2,
verbose = TRUE,
global = TRUE,
pairwise = TRUE,
dunnet = TRUE,
trend = TRUE,
iter_control = list(tol = 1e-2, max_iter = 20,
verbose = TRUE),
em_control = list(tol = 1e-5, max_iter = 100),
lme_control = lme4::lmerControl(),
mdfdr_control = list(fwer_ctrl_method = "holm", B = 100),
trend_control = list(contrast = list(matrix(c(1, 0, -1, 1),
nrow = 2,
byrow = TRUE),
matrix(c(-1, 0, 1, -1),
nrow = 2,
byrow = TRUE)),
node = list(2, 2),
solver = "ECOS",
B = 10))
out = ancombc2(data = tse, assay_name = "counts",
tax_level = "Family",
fix_formula = "age + region + bmi",
rand_formula = NULL,
p_adj_method = "holm",
prv_cut = 0.10,
lib_cut = 1000,
s0_perc = 0.05,
group = "bmi",
struc_zero = TRUE,
neg_lb = TRUE,
alpha = 0.05,
n_cl = 2,
global = TRUE,
pairwise = TRUE,
dunnet = TRUE,
trend = TRUE,
iter_control = list(tol = 1e-2, max_iter = 20),
em_control = list(tol = 1e-5, max_iter = 100),
lme_control = lme4::lmerControl(),
mdfdr_control = list(fwer_ctrl_method = "holm", B = 100),
trend_control = list(contrast = list(matrix(c(1, 0, -1, 1),
nrow = 2,
byrow = TRUE),
matrix(c(-1, 0, 1, -1),
nrow = 2,
byrow = TRUE)),
node = list(2, 2),
solver = "ECOS",
B = 10))
data(atlas1006, package = "microbiome")
tse = mia::makeTreeSummarizedExperimentFromPhyloseq(atlas1006)
# subset to baseline
tse = tse[, tse$time == 0]
# Re-code the bmi group
tse$bmi = recode(tse$bmi_group,
obese = "obese",
severeobese = "obese",
morbidobese = "obese")
# Subset to lean, overweight, and obese subjects
tse = tse[, tse$bmi %in% c("lean", "overweight", "obese")]
# Note that by default, levels of a categorical variable in R are sorted
# alphabetically. In this case, the reference level for `bmi` will be
# `lean`. To manually change the reference level, for instance, setting `obese`
# as the reference level, use:
tse$bmi = factor(tse$bmi, levels = c("obese", "overweight", "lean"))
# Create the region variable
tse$region = recode(as.character(tse$nationality),
Scandinavia = "NE", UKIE = "NE", SouthEurope = "SE",
CentralEurope = "CE", EasternEurope = "EE",
.missing = "unknown")
# Discard "EE" as it contains only 1 subject
# Discard subjects with missing values of region
tse = tse[, ! tse$region %in% c("EE", "unknown")]
out = ancombc2(data = tse, assay_name = "counts",
tax_level = "Family",
fix_formula = "age + region + bmi",
rand_formula = NULL,
p_adj_method = "holm",
prv_cut = 0.10,
lib_cut = 1000,
s0_perc = 0.05,
group = "bmi",
struc_zero = TRUE,
neg_lb = TRUE,
alpha = 0.05,
n_cl = 2,
global = TRUE,
pairwise = TRUE,
dunnet = TRUE,
trend = TRUE,
iter_control = list(tol = 1e-2, max_iter = 20),
em_control = list(tol = 1e-5, max_iter = 100),
lme_control = lme4::lmerControl(),
mdfdr_control = list(fwer_ctrl_method = "holm", B = 100),
trend_control = list(contrast = list(matrix(c(1, 0, -1, 1),
nrow = 2,
byrow = TRUE),
matrix(c(-1, 0, 1, -1),
nrow = 2,
byrow = TRUE)),
node = list(2, 2),
solver = "ECOS",
B = 10))

<<<<<<< HEAD
bo <- 12 #the value of y that you get when x =0
# You may generate values of the predictor variable however you wish.
# lm(outcome ~ predictor, data)
# effect.size = mean(group1)-mean(group2)/sd
# y=b1x + bo
bo <- 12 #the value of y that you get when x =0
# You may generate values of the predictor variable however you wish.
# lm(outcome ~ predictor, data)
# effect.size = mean(group1)-mean(group2)/sd
# y=b1x + bo
bo <- 12 #the value of y that you get when x =0
# You may generate values of the predictor variable however you wish.
# lm(outcome ~ predictor, data)
# effect.size = mean(group1)-mean(group2)/sd
# y=b1x + bo
bo <- 12 #the value of y that you get when x =0
sd <- 10
effec.size <- -1.3
# effec.size=mean.diff/sd
mean.diff <- effec.size * sd
mean.diff
rnorm(1000)
data=rnorm(1000)
data
data=rnorm(1000, mean = -13, sd=10)
data
# You may generate values of the predictor variable however you wish.
# lm(outcome ~ predictor, data)
# effect.size = mean(group1)-mean(group2)/sd
# y=b1x + bo
alpha <- 12 #the value of y that you get when x =0
sd <- 10
beta <- -1.3
# effec.size=mean.diff/sd
mean.diff <- effec.size * sd
sigma <- 10
y <- rnorm(1000, mean = -13, sd=10)
y
x <- rnorm(1000,20, 25)
x
x <- rnorm(1000,0, 25)
x
x <- 1:1000
x <- 1:1000
x
x <- rnorm(1000,100,10)
x
knitr::opts_chunk$set(echo = TRUE)
alpha <- 12
sigma <- 10
beta <- -1.3
# lm <- lm(outcome ~ (beta*predictor + alpha, sigma)
y <- rnorm(1000, mean = -13, sd=10)
x <- rnorm(1000,100,10)
# Estimating the mean of a normal
ln.L <- function(y,x,alpha,beta,sigma){
return(sum(
dnorm(y, mean=alpha + beta * x, sd=sigma, log=TRUE)
))
}
alpha <- 12
sigma <- 10
beta <- -1.3
lm <- lm(outcome ~ (beta*predictor + alpha, sigma)
y <- rnorm(1000, mean = -13, sd=10)
x <- rnorm(1000,100,10)
# Estimating the mean of a normal
ln.L <- function(y,x,alpha,beta,sigma){
return(sum(
dnorm(y, mean=alpha + beta * x, sd=sigma, log=TRUE)
))
}
ln.L(y,x,alpha,beta,sigma)
sum(dnorm(y, mean=alpha + beta * x, sd=sigma, log=TRUE)
)
lm <- lm(y ~ (beta*x + alpha, sigma)
data <- data.frame(x,y)
data
lm <- lm(y ~ (beta*x + alpha, sigma),data)
y <- rnorm(1000, mean = -1.3*x+12, sd=10)
x <- rnorm(1000,100,10)
plot(x,y,xlab="predictor", ylab="response")
abline(a=12,b=-1.3,col=2,lwd=2)
alpha <- 12
sigma <- 10
beta <- -1.3
y <- rnorm(1000, mean = -1.3*x+12, sd=10)
x <- seq(1000,100,10)
plot(x,y,xlab="predictor", ylab="response")
abline(a=12,b=-1.3,col=2,lwd=2)
y <- rnorm(1000, mean = -1.3*x+12, sd=10)
x <- seq(1000,100,0)
y <- rnorm(1000, mean = -1.3*x+12, sd=10)
x <- seq(1000,100,10)
y <- rnorm(1000, mean = -1.3*x+12, sd=10)
x <- seq(1000,100,10)
y <- rnorm(1000, mean = -1.3*x+12, sd=10)
x <- seq(0,10,length.out=1000)
plot(x,y,xlab="predictor", ylab="response")
abline(a=12,b=-1.3,col=2,lwd=2)
# lm <- lm(outcome ~ (beta*predictor + alpha, sigma)
y <- rnorm(1000, mean = -1.3*x+12, sd=10)
x <- seq(1000, 100)
x
plot(x,y,xlab="predictor", ylab="response")
abline(a=12,b=-1.3,col=2,lwd=2)
# lm <- lm(outcome ~ (beta*predictor + alpha, sigma)
y <- rnorm(1000, mean = -1.3*x+12, sd=10)
x <- rnorm(1000, 100, 10)
plot(x,y,xlab="predictor", ylab="response")
abline(a=12,b=-1.3,col=2,lwd=2)
# lm <- lm(outcome ~ (beta*predictor + alpha, sigma)
y <- rnorm(1000, mean = -1.3*x+12, sd=10)
x <- rnorm(1000, 10, 100)
plot(x,y,xlab="predictor", ylab="response")
abline(a=12,b=-1.3,col=2,lwd=2)
# lm <- lm(outcome ~ (beta*predictor + alpha, sigma)
y <- rnorm(1000, mean = -1.3*x+12, sd=10)
x <- seq(10,100, length.out = 1000)
plot(x,y,xlab="predictor", ylab="response")
abline(a=12,b=-1.3,col=2,lwd=2)
adonis(otu_dist~map$pod)
n1 <- 60  				# Number of females
n2 <- 40					# Number of males
mu1 <- 105					# Population mean of females
mu2 <- 77.5					# Population mean of males
sigma1 <- 3				# SD of females
sigma2 <- 2.5  # S
n <- n1+n2					# Total sample size
y1 <- rnorm(n1, mu1, sigma1)		# Data for females separately
y2 <- rnorm(n2, mu2, sigma2)		# Data for males separately
n <- n1+n2					# Total sample size
y1 <- rnorm(n1, mu1, sigma1)		# Data for females separately
y2 <- rnorm(n2, mu2, sigma2)		# Data for males separately
n
y1
y2
data2 <- data.frame(y=c(y1, y2), sex=c(rep("f",n1),rep("m",n2)))			# Aggregate both data sets
data2
boxplot(data2$y ~ data2$sex, col = "grey", xlab = "Sex", ylab = "Wingspan (cm)", las = 1)
#Simulate the data
n1 <- 60  				# Number of females
n2 <- 40					# Number of males
mu1 <- 105					# Population mean of females
mu2 <- 77.5					# Population mean of males
sigma <- 2.75				# Average population SD of both
n <- n1+n2					# Total sample size
y1 <- rnorm(n1, mu1, sigma)		# Data for females separately
y2 <- rnorm(n2, mu2, sigma)		# Data for males separately
data1 <- data.frame(y=c(y1, y2), sex=c(rep("f",n1),rep("m",n2)))			# Aggregate both data sets
boxplot(data1$y ~ data1$sex, col = "grey", xlab = "Sex", ylab = "Wingspan (cm)", las = 1)
n <- n1+n2  				# Total sample size
alpha <- mu1				# Mean for females serves as the intercept
beta <- mu2-mu1				# Beta is the difference male-female
E.y <- alpha + beta*x			# expectation
y.obs <- rnorm(n = n, mean = E.y, sd = sigma)	# Add random variation
x <- rep(c(0,1), c(n1, n2))		# Indicator for male
boxplot(y.obs ~ x, col = "grey", xlab = "Male", ylab = "Wingspan (cm)", las = 1)
fit1 <- lm(data1$y ~ data1$sex)  		# Analyze the data with an effects parameterization
fit2 <- lm(data1$y ~ data1$sex-1) 		# Analyze the data with a means parameterization
summary(fit1)
summary(fit2)
#Take a look at the design matrices for the two models (are they the same?):
model.matrix(fit1)
model.matrix(fit2)
#What is the interpretation of the coefficients?
fit1$coefficients
fit2$coefficients
#Is there a difference in wingspan between males and females?
#It's easiest to figure this out using fit1.  Why?
confint(fit1)
#But we can also tell with the means parameterization
confint(fit2)
#Pull out the residuals
residual = fit1$residuals
predicted= fit1$fitted.values
#Is there a pattern in the residuals?
plot(predicted, residual, main = "Residuals vs. predicted values",
las = 1, xlab = "Predicted values", ylab = "Residuals")
abline(h = 0)
#Another way to do this analysis is with the function t.test
t.test(data1$y ~ data1$sex, var.equal=TRUE)
#Simulate the data
n1 <- 60  				# Number of females
n2 <- 40					# Number of males
mu1 <- 105					# Population mean of females
mu2 <- 77.5					# Population mean of males
sigma1 <- 3				# SD of females
sigma2 <- 2.5  # SD of males
n <- n1+n2					# Total sample size
y1 <- rnorm(n1, mu1, sigma1)		# Data for females separately
y2 <- rnorm(n2, mu2, sigma2)		# Data for males separately
data2 <- data.frame(y=c(y1, y2), sex=c(rep("f",n1),rep("m",n2)))			# Aggregate both data sets
boxplot(data2$y ~ data2$sex, col = "grey", xlab = "Sex", ylab = "Wingspan (cm)", las = 1)
t.test(data2$y ~ data2$sex, var.equal=FALSE)
R. version
version
version
library(BiocManager)
#################################### Bean seed microbiomes variability (new fungal ITS analysis from Nejc - after removing plant contaminants) #####################################
##
# Date: November 29th 2021
# By : Ari Fina Bintarti
# INSTALL PACKAGES
install.packages(c('vegan', 'tidyverse'))
#################################### Bean seed microbiomes variability (new fungal ITS analysis from Nejc - after removing plant contaminants) #####################################
##
# Date: November 29th 2021
# By : Ari Fina Bintarti
# INSTALL PACKAGES
install.packages(c('vegan', 'tidyverse'))
library(dada2)
=======
library(multcomp)
# Install packages
install.packages(c('vegan', 'tidyverse'))
install.packages('reshape')
install.packages("ggpubr")
install.packages("car")
install.packages("agricolae")
install.packages("multcompView")
install.packages("gridExtra")
install.packages("ggplot2")
install.packages("ggtext")
install.packages("sjmisc")
install.packages("sjPlot")
install.packages("MASS")
install.packages("FSA")
install.packages('mvtnorm', dep = TRUE)
install.packages("rcompanion")
install.packages("onewaytests")
install.packages("PerformanceAnalytics")
install.packages("gvlma")
install.packages("ggpmisc")
install.packages("fitdistrplus")
install.packages('BiocManager')
install.packages("dplyr")
install.packages("lme4")
install.packages("nlme")
install.packages("car")
install.packages("multcomp")
install.packages("ape")
install.packages("car")
library(multcomp)
library(car)
library(BiocManager)
library(vegan)
library(plyr)
library(dplyr)
library(tidyverse)
library(tidyr)
library(ggplot2)
library(ggtext)
library(reshape)
library(ggpubr)
library(car)
library(agricolae)
library(multcompView)
library(grid)
library(gridExtra)
library(sjmisc)
library(sjPlot)
library(MASS)
library(FSA)
library(rcompanion)
library(onewaytests)
library(ggsignif)
library(PerformanceAnalytics)
library(gvlma)
library(ggpmisc)
library(tibble)
library(fitdistrplus)
library(lme4)
library(nlme)
library(ape)
k09pwc.bc # not significant
>>>>>>> 8490084a7912d18b71157071c41ac0b6bb3c8fb7
library(devtools)
library(multcomp)
library(car)
library(BiocManager)
library(vegan)
library(plyr)
library(dplyr)
library(tidyverse)
library(tidyr)
library(ggplot2)
library(ggtext)
library(reshape)
library(ggpubr)
library(car)
library(agricolae)
library(multcompView)
library(grid)
library(gridExtra)
library(sjmisc)
library(sjPlot)
library(MASS)
library(FSA)
library(rcompanion)
library(onewaytests)
library(ggsignif)
library(PerformanceAnalytics)
library(gvlma)
library(ggpmisc)
library(tibble)
library(fitdistrplus)
library(lme4)
library(nlme)
library(ape)
<<<<<<< HEAD
# SET THE WORKING DIRECTORY
setwd('/Users/arifinabintarti/Documents/France/microservices/070623_AOB_out/AOB.ASV-analysis')
setwd('D:/Fina/INRAE_Project/microservices/070623_AOB_out/AOB.ASV-analysis')
# SET THE WORKING DIRECTORY
setwd('/Users/arifinabintarti/Documents/France/microservices/070623_AOB_out/AOB.ASV-analysis')
setwd('D:/Fina/INRAE_Project/microservices/070623_AOB_out/AOB.ASV-analysis')
=======
setwd('D:/Fina/INRAE_Project/microservices/070623_AOB_out/AOB.ASV-analysis')
>>>>>>> 8490084a7912d18b71157071c41ac0b6bb3c8fb7
wd <- print(getwd())
# load the asv table
aob.asv <- read.table('annotated.AOB.ASVs.counts.tsv', sep='\t', header=T, row.names = 1, check.names = FALSE)
dim(aob.asv) # 1338  192
sort(colSums(aob.asv, na.rm = FALSE, dims = 1), decreasing = F) # there are no asv that does not exist in at least one sample.
# load the taxonomy table
setwd('/Users/arifinabintarti/Documents/France/microservices/070623_AOB_out/')
setwd('D:/Fina/INRAE_Project/microservices/070623_AOB_out')
aob.tax <- read.csv("besthit.diamond.output.curateddb.AOB.ASVs.csv")
dim(aob.tax) # 1338
# load the metadata
setwd('/Users/arifinabintarti/Documents/France/microservices/')
setwd('D:/Fina/INRAE_Project/microservices')
meta_micro <- read.csv("meta_microservices.csv")
# load phylogenetic tree (nwk file)
setwd('/Users/arifinabintarti/Documents/France/microservices/070623_AOB_out/AOB.Phylogenetic-analysis/')
setwd('D:/Fina/INRAE_Project/microservices/070623_AOB_out/AOB.Phylogenetic-analysis')
aob.tre <- ape::read.tree("tree.AOB.nwk")
<<<<<<< HEAD
############################################################################
# rarefaction curve
set.seed(13)
rarecurve(t(aob.asv), step=50, cex=0.5, lwd=2, ylab="ASV", label=F)
=======
>>>>>>> 8490084a7912d18b71157071c41ac0b6bb3c8fb7
#BiocManager::install("phyloseq")
library(phyloseq)
# re-order the rownames of the asv table to match the colnames of the metadata.
re_order <- match(rownames(meta_micro), colnames(aob.asv))
aob.asv.ord  <- aob.asv[ ,re_order]
aob.asv.physeq = otu_table(aob.asv.ord, taxa_are_rows = TRUE) # asv table
sample_names(aob.asv.physeq)
# adding "S" for sample names to avoid possible problem later on
sample_names(aob.asv.physeq) <- paste0("S", sample_names(aob.asv.physeq))
# phyloseq object of the taxonomy table
aob.tax <- column_to_rownames(aob.tax, var = "ASVid")
aob.tax.physeq = tax_table(as.matrix(aob.tax)) # taxonomy table
# phyloseq object of the metadata
meta_micro$Date <- factor(meta_micro$Date, levels = c("4/28/22", "6/1/22", "7/5/22", "7/20/22", "9/13/22"),
labels = c("04-28-22", "06-01-22", "07-05-22", "07-20-22", "09-13-22"))
rownames(meta_micro) <- sample_names(aob.asv.physeq)
aob.meta.physeq <- sample_data(meta_micro)# meta data
sample_names(aob.meta.physeq)
# read the rooted tree
setwd('/Users/arifinabintarti/Documents/France/microservices/070623_AOB_out/AOB-rooted-tree/')
setwd('D:/Fina/INRAE_Project/microservices/070623_AOB_out/AOB-rooted-tree/')
AOB_rooted_tree <- ape::read.tree("tree.nwk")
# make phyloseq object
aob.physeq <- merge_phyloseq(aob.asv.physeq,aob.tax.physeq,aob.meta.physeq,AOB_rooted_tree)
aob.physeq
sample_data(aob.physeq)$SampleID <- paste0("S", sample_data(aob.physeq)$SampleID)
sample_data(aob.physeq)
# run the ggrare function attached in the file "generating_rarecurve.r"
set.seed(13)
aob.rare <- ggrare(aob.physeq, step = 1, color = "Type", label = "SampleID", se = FALSE)
#set up your own color palette
<<<<<<< HEAD
install.packages("colorBlindness")
library(colorBlindness)
displayAvailablePalette(color="white")
#Palette <- c("#1F968BFF","#FDE725FF")
PairedColor12Steps
Brown2Blue10Steps
=======
#install.packages("colorBlindness")
library(colorBlindness)
displayAvailablePalette(color="white")
>>>>>>> 8490084a7912d18b71157071c41ac0b6bb3c8fb7
Palette <- c("#FF7F00", "#662F00")
names(Palette) <- levels(sample_data(aob.physeq)$Type)
Palette
legend_title <- "Sample Type"
library(ggtext)
# ASV Table
sort(colSums(aob.asv, na.rm = FALSE, dims = 1), decreasing = F)
set.seed(333)
aob.rare.1282.seq <- rarefy_even_depth(aob.physeq, sample.size = 1282,
rngseed = 333, replace = FALSE, trimOTUs = TRUE, verbose = TRUE)
aob.rare.1282.seq # 1 samples removed (S11), 116 ASVs were removed
sort(colSums(otu_table(aob.rare.1282.seq), na.rm = FALSE, dims = 1), decreasing = F)
colSums(otu_table(aob.rare.1282.seq))
aob.asv.rare1k <- as.data.frame(otu_table(aob.rare.1282.seq))
dim(aob.asv.rare1k) # 1222 ASVs
aob.asv.rare1k_pa <- 1*(aob.asv.rare1k>0)
aob.s <- specnumber(aob.asv.rare1k, MARGIN = 2) # richness
aob.richness <- as.data.frame(aob.s)
aob.h <- diversity(t(aob.asv.rare1k), index = 'shannon') # Shannon index
aob.shannon <- as.data.frame(aob.h)
aob.d <- diversity(t(aob.asv.rare1k), index = 'simpson') # Simpson index
aob.simpson <- as.data.frame(aob.d)
aob.inv.d <- diversity(t(aob.asv.rare1k), index = 'invsimpson')
aob.meta.df <- data.frame(meta_micro)
aob.meta.df.sub <- aob.meta.df %>% filter(SampleID != 11)# filter out S11 from the metadata
aob.meta.df.sub$Richness <- aob.s
aob.meta.df.sub$Shannon <- aob.h
aob.meta.df.sub$Simpson <- aob.d
aob.meta.df.sub$InvSimpson <- aob.inv.d
#aob.min.meta.df$Date  <- as.Date(aob.min.meta.df$Date , "%m/%d/%Y")
str(aob.meta.df.sub)
aob.meta.df.sub$Type <- factor(aob.meta.df.sub$Type, levels = c("BS", "RS"),
labels = c("Bulk Soil", "Rhizosphere"))
aob.meta.df.sub$Treatment <- factor(aob.meta.df.sub$Treatment, levels = c("D", "K", "M"),
labels = c("Biodynamic", "Conventional", "Mineral fertilized"))
aob.meta.df.sub$SampleID<-as.factor(aob.meta.df.sub$SampleID)
aob.meta.df.sub$PlotID<-as.factor(aob.meta.df.sub$PlotID)
aob.meta.df.sub$Irrigation<-as.factor(aob.meta.df.sub$Irrigation)
# tidy up the data frame
aob.meta.df.tidy <- aob.meta.df.sub %>%
group_by(Irrigation, Treatment, Date,  Type, var2,var3) %>%
summarize(Mean.Rich=mean(Richness),
Mean.Sha=mean(Shannon),
Mean.Simp=mean(Simpson),
Mean.invsimp=mean(InvSimpson))
str(aob.meta.df.tidy)
<<<<<<< HEAD
# plotting line chart
#remotes::install_github("Nowosad/rcartocolor")
library(rcartocolor)
#install.packages("ggnewscale")
library(ggnewscale)
#install.packages("viridis")
library(viridis)
library(remotes)
library(rstatix)
library(sf)
library(ggpattern)
=======
library(rcartocolor)
carto_pal(n = NULL, 'Safe')
carto_pal(n = NULL, 'Vivid')
display_carto_pal(7, "Vivid")
display_carto_pal(12, "Safe")
color.trt <- c(D="#E58606", K="#5D69B1", M="#52BCA3")
install.packages("ggnewscale")
library(ggnewscale)
#install.packages("viridis")
library(viridis)
aob_dist_bc <- vegdist(t(aob.asv.rare1k), method = "bray")
# Jaccard using rarefied data:
aob.dist_jac <- vegdist(t(aob.asv.rare1k), binary = TRUE, method = "jaccard")
# Weighted UniFrac using rarefied data:
aob.wUF_dist <- UniFrac(aob.rare.1282.seq, weighted=TRUE, normalized = TRUE)
aob.wUF_dist
# Unweighted UniFrac using rarefied data:
aob.uwUF_dist <- UniFrac(aob.rare.1282.seq, weighted=FALSE, normalized = TRUE)
aob.uwUF_dist
aob_pcoa.bc <- cmdscale(aob_dist_bc, eig=T)
# jaccard using rarefied data:
aob_pcoa.jac <- cmdscale(aob.dist_jac, eig=T)
# Weighted UniFrac using rarefied data:
aob_pcoa.wUF <- cmdscale(aob.wUF_dist, eig=T)
# Unweighted UniFrac using rarefied data:
aob_pcoa.uwUF <- cmdscale(aob.uwUF_dist, eig=T)
# 3. scores of PC1 and PC2
# bray-curtis:
ax1.scores <- aob_pcoa.bc$points[,1]
ax2.scores <- aob_pcoa.bc$points[,2]
# jaccard:
ax1.scores.j <- aob_pcoa.jac$points[,1]
ax2.scores.j <- aob_pcoa.jac$points[,2]
# Weighted UniFrac using rarefied data:
ax1.scores.wUF <- aob_pcoa.wUF$points[,1]
ax2.scores.wUF <- aob_pcoa.wUF$points[,2]
# Unweighted UniFrac using rarefied data:
ax1.scores.uwUF <- aob_pcoa.uwUF$points[,1]
ax2.scores.uwUF <- aob_pcoa.uwUF$points[,2]
ax1 <- aob_pcoa.bc$eig[1]/sum(aob_pcoa.bc$eig)
ax2 <- aob_pcoa.bc$eig[2]/sum(aob_pcoa.bc$eig)
aob.map.pcoa <- cbind(aob.meta.df.sub,ax1.scores,ax2.scores)
# jaccard
ax1.j <- aob_pcoa.jac$eig[1]/sum(aob_pcoa.jac$eig)
ax2.j <- aob_pcoa.jac$eig[2]/sum(aob_pcoa.jac$eig)
aob.map.pcoa.j <- cbind(aob.meta.df.sub,ax1.scores.j,ax2.scores.j)
# Weighted UniFrac using rarefied:
ax1.wUF <- aob_pcoa.wUF$eig[1]/sum(aob_pcoa.wUF$eig)
ax2.wUF <- aob_pcoa.wUF$eig[2]/sum(aob_pcoa.wUF$eig)
aob.map.pcoa.wUF <- cbind(aob.meta.df.sub,ax1.scores.wUF,ax2.scores.wUF)
# unweighted UniFrac
ax1.uwUF <- aob_pcoa.uwUF$eig[1]/sum(aob_pcoa.uwUF$eig)
ax2.uwUF <- aob_pcoa.uwUF$eig[2]/sum(aob_pcoa.uwUF$eig)
aob.map.pcoa.uwUF <- cbind(aob.meta.df.sub,ax1.scores.uwUF,ax2.scores.uwUF)
#require("ggrepel")
library(ggrepel)
library(viridis)
>>>>>>> 8490084a7912d18b71157071c41ac0b6bb3c8fb7
aob.asv.bulk <- aob.asv.rare1k[,1:119]
aob.asv.bulk1 <- aob.asv.bulk[rowSums(aob.asv.bulk)>0,]
sort(rowSums(aob.asv.bulk1, na.rm = FALSE, dims = 1), decreasing = FALSE)
aob.bulk_dist_bc <- vegdist(t(aob.asv.bulk1), method = "bray")
# jaccard - Bulk Soil :
aob.bulk_dist_jac <- vegdist(t(aob.asv.bulk1), binary = TRUE, method = "jaccard")
# Weighted UniFrac (rarefied) - Bulk Soil:
aob.physeq_bulk <- subset_samples(aob.rare.1282.seq, Type=="BS")
aob.physeq_bulk1 <- prune_taxa(taxa_sums(aob.physeq_bulk)>0, aob.physeq_bulk)
aob.physeq_bulk1
sort(taxa_sums(aob.physeq_bulk1), decreasing =F) #checking
aob.bulk_dist_wUF <- UniFrac(aob.physeq_bulk1, weighted=TRUE, normalized = TRUE)
aob.bulk_dist_wUF
# Unweighted UniFrac (rarefied) -  Bulk Soil:
aob.bulk_dist_uwUF <- UniFrac(aob.physeq_bulk1, weighted=FALSE, normalized = TRUE)
aob.bulk_dist_uwUF
<<<<<<< HEAD
# 2. CMD/classical multidimensional scaling (MDS) of a data matrix. Also known as principal coordinates analysis
# Bray-Curtis - Bulk Soil:
=======
>>>>>>> 8490084a7912d18b71157071c41ac0b6bb3c8fb7
aob.bulk_pcoa_bc <- cmdscale(aob.bulk_dist_bc, eig=T)
# Jaccard - Bulk Soil:
aob.bulk_pcoa_jac <- cmdscale(aob.bulk_dist_jac, eig=T)
# Weighted UniFrac - Bulk Soil:
aob.bulk_pcoa_wUF <- cmdscale(aob.bulk_dist_wUF, eig=T)
# Unweighted UniFrac - Bulk Soil:
aob.bulk_pcoa.uwUF <- cmdscale(aob.bulk_dist_uwUF, eig=T)
# 3. scores of PC1 and PC2
# Bray-Curtis - Bulk Soil:
ax1.scores.bulk <- aob.bulk_pcoa_bc$points[,1]
ax2.scores.bulk <- aob.bulk_pcoa_bc$points[,2]
# Jaccard - Bulk Soil:
ax1.scores.j.bulk <- aob.bulk_pcoa_jac$points[,1]
ax2.scores.j.bulk <- aob.bulk_pcoa_jac$points[,2]
# Weighted UniFrac - Bulk Soil:
ax1.scores.wUF.bulk <- aob.bulk_pcoa_wUF$points[,1]
ax2.scores.wUF.bulk <- aob.bulk_pcoa_wUF$points[,2]
# Unweighted UniFrac - Bulk Soil:
ax1.scores.uwUF.bulk <- aob.bulk_pcoa.uwUF$points[,1]
ax2.scores.uwUF.bulk <- aob.bulk_pcoa.uwUF$points[,2]
#env_fit <- envfit(otu_pcoa, env, na.rm=TRUE)
# 4. calculate percent variance explained, then add to plot
aob.meta.bulk <- aob.meta.df.sub[1:119,]
# Bray-curtis - Bulk Soil:
ax1.bulk <- aob.bulk_pcoa_bc$eig[1]/sum(aob.bulk_pcoa_bc$eig)
ax2.bulk <- aob.bulk_pcoa_bc$eig[2]/sum(aob.bulk_pcoa_bc$eig)
aob.map.pcoa.bulk <- cbind(aob.meta.bulk,ax1.scores.bulk,ax2.scores.bulk)
# Jaccard - Bulk Soil:
ax1.j.bulk <- aob.bulk_pcoa_jac$eig[1]/sum(aob.bulk_pcoa_jac$eig)
ax2.j.bulk <- aob.bulk_pcoa_jac$eig[2]/sum(aob.bulk_pcoa_jac$eig)
aob.map.pcoa.j.bulk <- cbind(aob.meta.bulk,ax1.scores.j.bulk,ax2.scores.j.bulk)
# Weighted UniFrac - Bulk Soil:
ax1.wUF.bulk <- aob.bulk_pcoa_wUF$eig[1]/sum(aob.bulk_pcoa_wUF$eig)
ax2.wUF.bulk <- aob.bulk_pcoa_wUF$eig[2]/sum(aob.bulk_pcoa_wUF$eig)
aob.map.pcoa.wUF.bulk <- cbind(aob.meta.bulk,ax1.scores.wUF.bulk,ax2.scores.wUF.bulk)
# Unweighted UniFrac - Bulk Soil:
ax1.uwUF.bulk <- aob.bulk_pcoa.uwUF$eig[1]/sum(aob.bulk_pcoa.uwUF$eig)
ax2.uwUF.bulk <- aob.bulk_pcoa.uwUF$eig[2]/sum(aob.bulk_pcoa.uwUF$eig)
aob.map.pcoa.uwUF.bulk <- cbind(aob.meta.bulk,ax1.scores.uwUF.bulk,ax2.scores.uwUF.bulk)
<<<<<<< HEAD
#################################################################################################
# RHIZOSPHERE
# Bray-Curtis - Rhizosphere :
=======
>>>>>>> 8490084a7912d18b71157071c41ac0b6bb3c8fb7
aob.asv.rh <- aob.asv.rare1k[,120:191]
aob.asv.rh1 <- aob.asv.rh[rowSums(aob.asv.rh)>0,]
sort(rowSums(aob.asv.rh1, na.rm = FALSE, dims = 1), decreasing = FALSE)
dim(aob.asv.rh1) #831
aob.rh_dist_bc <- vegdist(t(aob.asv.rh1), method = "bray")
# jaccard - Rhizosphere :
aob.rh_dist_jac <- vegdist(t(aob.asv.rh1), binary = TRUE, method = "jaccard")
# Weighted UniFrac (rarefied) - Rhizosphere :
aob.physeq_rh <- subset_samples(aob.rare.1282.seq, Type=="RS")
aob.physeq_rh1 <- prune_taxa(taxa_sums(aob.physeq_rh)>0, aob.physeq_rh)
aob.physeq_rh1
sort(taxa_sums(aob.physeq_rh1), decreasing =F) #checking
aob.rh_dist_wUF <- UniFrac(aob.physeq_rh1, weighted=TRUE, normalized = TRUE)
aob.rh_dist_wUF
# Unweighted UniFrac (rarefied) -  Rhizosphere :
aob.rh_dist_uwUF <- UniFrac(aob.physeq_rh1, weighted=FALSE, normalized = TRUE)
aob.rh_dist_uwUF
# 2. CMD/classical multidimensional scaling (MDS) of a data matrix. Also known as principal coordinates analysis
# Bray-Curtis - Rhizosphere :
aob.rh_pcoa_bc <- cmdscale(aob.rh_dist_bc, eig=T)
# Jaccard - Rhizosphere :
aob.rh_pcoa_jac <- cmdscale(aob.rh_dist_jac, eig=T)
# Weighted UniFrac - Rhizosphere :
aob.rh_pcoa_wUF <- cmdscale(aob.rh_dist_wUF, eig=T)
# Unweighted UniFrac - Rhizosphere :
aob.rh_pcoa.uwUF <- cmdscale(aob.rh_dist_uwUF, eig=T)
# 3. scores of PC1 and PC2
# Bray-Curtis - Rhizosphere :
ax1.scores.rh <- aob.rh_pcoa_bc$points[,1]
ax2.scores.rh <- aob.rh_pcoa_bc$points[,2]
# Jaccard - Rhizosphere :
ax1.scores.j.rh <- aob.rh_pcoa_jac$points[,1]
ax2.scores.j.rh <- aob.rh_pcoa_jac$points[,2]
# Weighted UniFrac - Rhizosphere :
ax1.scores.wUF.rh <- aob.rh_pcoa_wUF$points[,1]
ax2.scores.wUF.rh <- aob.rh_pcoa_wUF$points[,2]
# Unweighted UniFrac - Rhizosphere :
ax1.scores.uwUF.rh <- aob.rh_pcoa.uwUF$points[,1]
ax2.scores.uwUF.rh <- aob.rh_pcoa.uwUF$points[,2]
#env_fit <- envfit(otu_pcoa, env, na.rm=TRUE)
# 4. calculate percent variance explained, then add to plot
aob.meta.rh <- aob.meta.df.sub[120:191,]
# Bray-curtis - Rhizosphere :
ax1.rh <- aob.rh_pcoa_bc$eig[1]/sum(aob.rh_pcoa_bc$eig)
ax2.rh <- aob.rh_pcoa_bc$eig[2]/sum(aob.rh_pcoa_bc$eig)
aob.map.pcoa.rh <- cbind(aob.meta.rh,ax1.scores.rh,ax2.scores.rh)
# Jaccard - Rhizosphere :
ax1.j.rh <- aob.rh_pcoa_jac$eig[1]/sum(aob.rh_pcoa_jac$eig)
ax2.j.rh <- aob.rh_pcoa_jac$eig[2]/sum(aob.rh_pcoa_jac$eig)
aob.map.pcoa.j.rh <- cbind(aob.meta.rh,ax1.scores.j.rh,ax2.scores.j.rh)
# Weighted UniFrac - Rhizosphere :
ax1.wUF.rh <- aob.rh_pcoa_wUF$eig[1]/sum(aob.rh_pcoa_wUF$eig)
ax2.wUF.rh <- aob.rh_pcoa_wUF$eig[2]/sum(aob.rh_pcoa_wUF$eig)
aob.map.pcoa.wUF.rh <- cbind(aob.meta.rh,ax1.scores.wUF.rh,ax2.scores.wUF.rh)
# Unweighted UniFrac - Rhizosphere :
ax1.uwUF.rh <- aob.rh_pcoa.uwUF$eig[1]/sum(aob.rh_pcoa.uwUF$eig)
ax2.uwUF.rh <- aob.rh_pcoa.uwUF$eig[2]/sum(aob.rh_pcoa.uwUF$eig)
aob.map.pcoa.uwUF.rh <- cbind(aob.meta.rh,ax1.scores.uwUF.rh,ax2.scores.uwUF.rh)
<<<<<<< HEAD
=======
aob.meta.rh
>>>>>>> 8490084a7912d18b71157071c41ac0b6bb3c8fb7
# A. Bray-Curtis - Bulk Soil :
set.seed(13)
aob.adonis.bulk <- adonis2(aob.bulk_dist_bc ~ Irrigation*Treatment*Date, data=aob.meta.bulk,
permutation=999,
method="bray",
strata = NULL) # only treatment is significant
aob.adonis.bulk
set.seed(13)
aob.adonis.bulk.irri <- adonis2(aob.bulk_dist_bc ~ Irrigation, data=aob.meta.bulk,
permutation=999,
method="bray",
strata = NULL) # not significant
aob.adonis.bulk.irri
<<<<<<< HEAD
# B. Bray-Curtis - Rhizosphere :
set.seed(13)
aob.adonis.rh <- adonis2(aob.rh_dist_bc ~ Irrigation*Treatment*Date, data=aob.meta.rh,
permutation=999,
method="bray",
strata = NULL) # only treatment is significant
aob.adonis.rh
=======
set.seed(13)
aob.adonis.bulk.trt <- adonis2(aob.bulk_dist_bc ~ Treatment, data=aob.meta.bulk,
permutation=999,
method="bray",
strata = NULL) # significant (p val = 0.001***)
aob.adonis.bulk.trt
set.seed(13)
aob.adonis.bulk.date <- adonis2(aob.bulk_dist_bc ~ Date, data=aob.meta.bulk,
permutation=999,
method="bray",
strata = NULL) # not significant
aob.adonis.bulk.date
>>>>>>> 8490084a7912d18b71157071c41ac0b6bb3c8fb7
# B. Bray-Curtis - Rhizosphere :
set.seed(13)
aob.adonis.rh <- adonis2(aob.rh_dist_bc ~ Irrigation*Treatment*Date, data=aob.meta.rh,
permutation=999,
method="bray",
strata = NULL) # only treatment is significant
aob.adonis.rh
<<<<<<< HEAD
=======
# A. Weighted UniFrac - Bulk Soil :
set.seed(13)
aob.adonis.wuF.bulk <- adonis2(aob.bulk_dist_wUF ~ Irrigation*Treatment*Date, data=aob.meta.bulk,
permutation=999,
strata = NULL)
aob.adonis.wuF.bulk
>>>>>>> 8490084a7912d18b71157071c41ac0b6bb3c8fb7

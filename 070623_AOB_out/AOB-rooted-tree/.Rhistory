colSums(ctrst.glm.CBFP.T3s.sub)
View(ctrst.glm.CBFP.T3s.sub)
upset.CBFP.T3s <- UpSetR::upset(ctrst.glm.CBFP.T3s.sub, sets = colnames(ctrst.glm.CBFP.T3s.sub),
order.by = "freq", keep.order = T)
colnames(ctrst.glm.CBFP.T3s.sub)
upset.CBFP.T3s
ctrst.glm.CBFP.T3s.sub
ctrst.glm.CBFP.T3s.sub[ctrst.glm.CBFP.T3s.sub >0.05]
# keep OTUs with at least one contrast <0.05
contrasts.glm.CBFP.T3s.sub <- contrasts.glm.CBFP.T3s[,colSums(contrasts.glm.CBFP.T3s<0.05) >= 1]
dim(contrasts.glm.CBFP.T3s.sub)
contrasts.glm.CBFP.T3s.sub
View(glmT3s.model.global)
View(glmT3s.pairwise.global.signif)
View(glmT3s.model.global)
View(glmT3s.pairwise.global)
ctrst.glm.CBFP.T3s.sub
View(ctrst.glm.CBFP.T3s.sub)
colSums(ctrst.glm.CBFP.T3s.sub)
rownames(ctrst.glm.CBFP.T3s.sub)
upset.CBFP.T3s <- UpSetR::upset(ctrst.glm.CBFP.T3s.sub, sets = colnames(ctrst.glm.CBFP.T3s.sub),
order.by = "freq", keep.order = T)
tmp0T3s = psmelt(tmp_T3s)
#tmp0T3s <- subset(tmp0T3s, (tmp0T3s$OTU %in% BFPOTUs.T3snet.sig))
tmp0T3s <- tmp0T3s[order(tmp0T3s$OTU),]
View(tmp0T3s)
# OTU names are like B_OTU-10 with B for bacteria, so you can split the B in another column like this :
tmp0T3s$group <- str_split_fixed(tmp0T3s$OTU, "_", 2)[,1]
tmp = tmp0T3s[,c("OTU","Irrigation","Abundance")]
tmp$Irrigation <- as.character(tmp$Irrigation)
View(tmp)
metadata<-as(sample_data(physeq),"data.frame")
metadata<-as(sample_data(aob.physeq_bulk1),"data.frame")
View(metadata)
metadata<-as(sample_data(M04seq1),"data.frame")
View(metadata)
CBFPT3s.mesh.sum<-aggregate(rowSums(t(otu_table(M04seq1)))~Genotype,data=metadata,sum)
View(metadata)
View(glmT3s.model.global)
glmT3s.model.global = glmT3s.sum.global
View(glmT3s.sum.global)
View(glmT3s.model.global)
glmT3s.pairwise.global = glmT3s.pairwise.global
View(glmT3s.pairwise.global)
glmT3s.sum
glmT3s.sum = summary(glmT3s)$coefficients
a = tibble("sample"= tmp_T3s@sam_data$SampleID,
"treatment"= as.character(tmp_T3s@sam_data$Irrigation))
a
aob.rare.1282.seq
# filtering low abundance of ASV
physeq.subset <- aob.rare.1282.seq
data.obs <- as.data.frame(otu_table(physeq.subset))
### keeping OTUs with at least 0.01 % relative abundance across all samples
keep.taxa.id=which((rowSums(data.obs)/sum(data.obs))>0.0001)
data.F=data.obs[keep.taxa.id,,drop=FALSE]
new.otu <- as.matrix(data.F) # convert it into a matrix.
new.otu <- otu_table(data.F, taxa_are_rows = TRUE) # convert into phyloseq compatible file.
otu_table(physeq.subset) <- new.otu # incorporate into phyloseq Object
physeq.subset
tmp_T3s <- physeq.subset
str(tmp_T3s)
aob.physeq_bulk1
# filtering low abundance of ASV
physeq.subset <- aob.physeq_bulk1
data.obs <- as.data.frame(otu_table(physeq.subset))
### keeping OTUs with at least 0.01 % relative abundance across all samples
keep.taxa.id=which((rowSums(data.obs)/sum(data.obs))>0.0001)
data.F=data.obs[keep.taxa.id,,drop=FALSE]
new.otu <- as.matrix(data.F) # convert it into a matrix.
new.otu <- otu_table(data.F, taxa_are_rows = TRUE) # convert into phyloseq compatible file.
otu_table(physeq.subset) <- new.otu # incorporate into phyloseq Object
physeq.subset # 467 ASV, 191 samples
str(tmp_T3s)
tmp_T3s <- physeq.subset
str(tmp_T3s)
#  treatment
a = tibble("sample"= tmp_T3s@sam_data$SampleID,
"date" = tmp_T3s@sam_data$Date,
"fertilization" = tmp_T3s@sam_data$Treatment,
"treatment"= tmp_T3s@sam_data$Irrigation)
View(a)
# force control as intercept
a[a == "Control"] <- "1a"
a = as.factor(a$treatment)
a
#  treatment
a = tibble("sample"= tmp_T3s@sam_data$SampleID,
"date" = tmp_T3s@sam_data$Date,
"fertilization" = tmp_T3s@sam_data$Treatment,
"treatment"= tmp_T3s@sam_data$Irrigation)
View(a)
# force control as intercept
a[a == "Control"] <- "1a"
a = as.factor(a$treatment)
#  treatment
a = tibble("sample"= tmp_T3s@sam_data$SampleID,
"date" = tmp_T3s@sam_data$Date,
"fertilization" = tmp_T3s@sam_data$Treatment,
"treatment"= tmp_T3s@sam_data$Irrigation)
# force control as intercept
a[a == "Control"] <- "1a"
# offset
o = log(sample_sums(tmp_T3s))
o
# random effect
z <- as.factor(tmp_T3s@sam_data$SampleID)
z
#b
b <- as.factor(tmp_T3s@sam_data$Treatment)
b
#c
c <- as.factor(tmp_T3s@sam_data$Date)
c
# offset
o = log(sample_sums(tmp_T3s))
# random effect
z <- as.factor(tmp_T3s@sam_data$SampleID)
# model with pairwise comparison ---------------------------------------------------------------------------------
glmT3s.sum.global = data.frame()
glmT3s.pairwise.global = data.frame()
# model with pairwise comparison ---------------------------------------------------------------------------------
glmT3s.sum.global = data.frame()
glmT3s.pairwise.global = data.frame()
for (i in 1:length(taxa_names(tmp_T3s))) {
OTU = taxa_names(tmp_T3s)[i]
# response variable
y = as.vector(tmp_T3s@otu_table[OTU,]@.Data)
tryCatch({
### model
glmT3s <- glmer(y ~ a*b*c + (1 | z), family='poisson', offset = o)
glmT3s.sum = summary(glmT3s)$coefficients
#glmT3s.sum = summary(glmT3s)$coefficients$cond
glmT3s.sum = tibble("OTU"= OTU,
"treatment"=rownames(glmT3s.sum),
as_tibble(glmT3s.sum))
glmT3s.sum
glmT3s.sum.global = rbind(glmT3s.sum.global,glmT3s.sum)
### multiple comparaison
glmT3s.pairwise = emmeans(glmT3s, ~a|b*c)
# select p value
glmT3s.pairwise.sum = summary(glmT3s.pairwise)
glmT3s.pairwise.sum = glmT3s.pairwise.sum[["contrasts"]]
# extract summary
tmp_df = glmT3s.pairwise.sum
# keep only comparisons of interest
tmp = unlist(strsplit(as.character(tmp_df$contrast)," - "))
tmp_df[,"a"] <- tmp[seq(1,length(tmp),by=2)]
tmp_df[,"b"] <- tmp[seq(2,length(tmp),by=2)]
tmp_df = tmp_df[tmp_df$a == "1a" | tmp_df$b == "1a" ,]
# adjust pval n=nb of contrasts
#tmp_df[,"p.adjust"] <- p.adjust(tmp_df$p.value,"fdr",n=21)
#tmp_df[,"p.adjust"] <- p.adjust(tmp_df$p.value,"bonferroni",n=21)
tmp_df = cbind("OTU"=OTU,tmp_df)
glmT3s.pairwise.global = rbind(glmT3s.pairwise.global,tmp_df)
},
error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
rm(OTU,y,glmT3s,glmT3s.sum)
}
glmT3s.model.global = glmT3s.sum.global
View(glmT3s.model.global)
#glmT3s.sum = summary(glmT3s)$coefficients$cond
glmT3s.sum = tibble("OTU"= OTU,
"treatment"=rownames(glmT3s.sum),
as_tibble(glmT3s.sum))
glmT3s <- glmer(y ~ a*b*c + (1 | z), family='poisson', offset = o)
y = as.vector(tmp_T3s@otu_table[OTU,]@.Data)
OTU = taxa_names(tmp_T3s)
y = as.vector(tmp_T3s@otu_table[OTU,]@.Data)
glmT3s <- glmer(y ~ a*b*c + (1 | z), family='poisson', offset = o)
#  treatment
a = tibble("sample"= tmp_T3s@sam_data$SampleID,
"date" = tmp_T3s@sam_data$Date,
"fertilization" = tmp_T3s@sam_data$Treatment,
"treatment"= tmp_T3s@sam_data$Irrigation)
# force control as intercept
a[a == "Control"] <- "1a"
str(a)
str(b)
a.ed = a$treatment
a.ed
str(a.ed)
as.factor(a.ed)
a. <- as.factor(a.ed)
a.
glmT3s <- glmer(y ~ a.*b*c + (1 | z), family='poisson', offset = o)
length(y)
length(b)
length(c)
# force control as intercept
a[a == "Control"] <- "1a"
a = as.factor(a$treatment)
str(a)
str(a.)
glmer(y ~ a + (1 | z), family='poisson', offset = o)
#  treatment
a = tibble("sample"= tmp_T3s@sam_data$SampleID,
"date" = tmp_T3s@sam_data$Date,
"fertilization" = tmp_T3s@sam_data$Treatment,
"treatment"= tmp_T3s@sam_data$Irrigation)
# force control as intercept
a[a == "Control"] <- "1a"
a = as.factor(a$treatment)
# offset
o = log(sample_sums(tmp_T3s))
# random effect
z <- as.factor(tmp_T3s@sam_data$SampleID)
# model with pairwise comparison ---------------------------------------------------------------------------------
glmT3s.sum.global = data.frame()
glmT3s.pairwise.global = data.frame()
OTU = taxa_names(tmp_T3s)
y = as.vector(tmp_T3s@otu_table[OTU,]
)
y
#  treatment
a = tibble("sample"= tmp_T3s@sam_data$SampleID,
"date" = tmp_T3s@sam_data$Date,
"fertilization" = tmp_T3s@sam_data$Treatment,
"treatment"= tmp_T3s@sam_data$Irrigation)
# force control as intercept
a[a == "Control"] <- "1a"
a.ed = a$treatment
a. <- as.factor(a.ed)
#b
b <- as.factor(tmp_T3s@sam_data$Treatment)
#c
c <- as.factor(tmp_T3s@sam_data$Date)
# offset
o = log(sample_sums(tmp_T3s))
# random effect
z <- as.factor(tmp_T3s@sam_data$SampleID)
# model with pairwise comparison ---------------------------------------------------------------------------------
glmT3s.sum.global = data.frame()
glmT3s.pairwise.global = data.frame()
for (i in 1:length(taxa_names(tmp_T3s))) {
OTU = taxa_names(tmp_T3s)[i]
# response variable
y = as.vector(tmp_T3s@otu_table[OTU,]@.Data)
tryCatch({
### model
glmT3s <- glmer(y ~ a.*b*c + (1 | z), family='poisson', offset = o)
glmT3s.sum = summary(glmT3s)$coefficients
#glmT3s.sum = summary(glmT3s)$coefficients$cond
glmT3s.sum = tibble("OTU"= OTU,
"treatment"=rownames(glmT3s.sum),
as_tibble(glmT3s.sum))
glmT3s.sum
glmT3s.sum.global = rbind(glmT3s.sum.global,glmT3s.sum)
### multiple comparaison
glmT3s.pairwise = emmeans(glmT3s, ~a|b*c)
# select p value
glmT3s.pairwise.sum = summary(glmT3s.pairwise)
glmT3s.pairwise.sum = glmT3s.pairwise.sum[["contrasts"]]
# extract summary
tmp_df = glmT3s.pairwise.sum
# keep only comparisons of interest
tmp = unlist(strsplit(as.character(tmp_df$contrast)," - "))
tmp_df[,"a"] <- tmp[seq(1,length(tmp),by=2)]
tmp_df[,"b"] <- tmp[seq(2,length(tmp),by=2)]
tmp_df = tmp_df[tmp_df$a == "1a" | tmp_df$b == "1a" ,]
# adjust pval n=nb of contrasts
#tmp_df[,"p.adjust"] <- p.adjust(tmp_df$p.value,"fdr",n=21)
#tmp_df[,"p.adjust"] <- p.adjust(tmp_df$p.value,"bonferroni",n=21)
tmp_df = cbind("OTU"=OTU,tmp_df)
glmT3s.pairwise.global = rbind(glmT3s.pairwise.global,tmp_df)
},
error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
rm(OTU,y,glmT3s,glmT3s.sum)
}
# model with pairwise comparison ---------------------------------------------------------------------------------
glmT3s.sum.global = data.frame()
glmT3s.pairwise.global = data.frame()
for (i in 1:length(taxa_names(tmp_T3s))) {
OTU = taxa_names(tmp_T3s)[i]
# response variable
y = as.vector(tmp_T3s@otu_table[OTU,]@.Data)
tryCatch({
### model
glmT3s <- glmer(y ~ a.*b*c + (1 | z), family='poisson', offset = o)
glmT3s.sum = summary(glmT3s)$coefficients
#glmT3s.sum = summary(glmT3s)$coefficients$cond
glmT3s.sum = tibble("OTU"= OTU,
"treatment"=rownames(glmT3s.sum),
as_tibble(glmT3s.sum))
glmT3s.sum
glmT3s.sum.global = rbind(glmT3s.sum.global,glmT3s.sum)
### multiple comparaison
glmT3s.pairwise = emmeans(glmT3s, ~a.|b*c)
# select p value
glmT3s.pairwise.sum = summary(glmT3s.pairwise)
glmT3s.pairwise.sum = glmT3s.pairwise.sum[["contrasts"]]
# extract summary
tmp_df = glmT3s.pairwise.sum
# keep only comparisons of interest
tmp = unlist(strsplit(as.character(tmp_df$contrast)," - "))
tmp_df[,"a"] <- tmp[seq(1,length(tmp),by=2)]
tmp_df[,"b"] <- tmp[seq(2,length(tmp),by=2)]
tmp_df = tmp_df[tmp_df$a == "1a" | tmp_df$b == "1a" ,]
# adjust pval n=nb of contrasts
#tmp_df[,"p.adjust"] <- p.adjust(tmp_df$p.value,"fdr",n=21)
#tmp_df[,"p.adjust"] <- p.adjust(tmp_df$p.value,"bonferroni",n=21)
tmp_df = cbind("OTU"=OTU,tmp_df)
glmT3s.pairwise.global = rbind(glmT3s.pairwise.global,tmp_df)
},
error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
rm(OTU,y,glmT3s,glmT3s.sum)
}
for (i in 1:length(taxa_names(tmp_T3s))) {
OTU = taxa_names(tmp_T3s)[i]
# response variable
y = as.vector(tmp_T3s@otu_table[OTU,]@.Data)
tryCatch({
### model
glmT3s <- glmer(y ~ a.*b*c + (1 | z), family='poisson', offset = o)
glmT3s.sum = summary(glmT3s)$coefficients
#glmT3s.sum = summary(glmT3s)$coefficients$cond
glmT3s.sum = tibble("OTU"= OTU,
"treatment"=rownames(glmT3s.sum),
as_tibble(glmT3s.sum))
glmT3s.sum
glmT3s.sum.global = rbind(glmT3s.sum.global,glmT3s.sum)
### multiple comparaison
glmT3s.pairwise = emmeans(glmT3s, ~a.|b*c)
# select p value
glmT3s.pairwise.sum = summary(glmT3s.pairwise)
glmT3s.pairwise.sum = glmT3s.pairwise.sum[["contrasts"]]
# extract summary
tmp_df = glmT3s.pairwise.sum
# keep only comparisons of interest
#tmp = unlist(strsplit(as.character(tmp_df$contrast)," - "))
#tmp_df[,"a"] <- tmp[seq(1,length(tmp),by=2)]
#tmp_df[,"b"] <- tmp[seq(2,length(tmp),by=2)]
#tmp_df = tmp_df[tmp_df$a == "1a" | tmp_df$b == "1a" ,]
# adjust pval n=nb of contrasts
#tmp_df[,"p.adjust"] <- p.adjust(tmp_df$p.value,"fdr",n=21)
#tmp_df[,"p.adjust"] <- p.adjust(tmp_df$p.value,"bonferroni",n=21)
tmp_df = cbind("OTU"=OTU,tmp_df)
glmT3s.pairwise.global = rbind(glmT3s.pairwise.global,tmp_df)
},
error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
rm(OTU,y,glmT3s,glmT3s.sum)
}
# model with pairwise comparison ---------------------------------------------------------------------------------
glmT3s.sum.global = data.frame()
glmT3s.pairwise.global = data.frame()
for (i in 1:length(taxa_names(tmp_T3s))) {
OTU = taxa_names(tmp_T3s)[i]
# response variable
y = as.vector(tmp_T3s@otu_table[OTU,]@.Data)
tryCatch({
### model
glmT3s <- glmer(y ~ a.*b*c + (1 | z), family='poisson', offset = o)
glmT3s.sum = summary(glmT3s)$coefficients
#glmT3s.sum = summary(glmT3s)$coefficients$cond
glmT3s.sum = tibble("OTU"= OTU,
"treatment"=rownames(glmT3s.sum),
as_tibble(glmT3s.sum))
glmT3s.sum
glmT3s.sum.global = rbind(glmT3s.sum.global,glmT3s.sum)
### multiple comparaison
glmT3s.pairwise = emmeans(glmT3s, ~a.|b*c)
# select p value
glmT3s.pairwise.sum = summary(glmT3s.pairwise)
glmT3s.pairwise.sum = glmT3s.pairwise.sum[["contrasts"]]
# extract summary
tmp_df = glmT3s.pairwise.sum
# keep only comparisons of interest
#tmp = unlist(strsplit(as.character(tmp_df$contrast)," - "))
#tmp_df[,"a"] <- tmp[seq(1,length(tmp),by=2)]
#tmp_df[,"b"] <- tmp[seq(2,length(tmp),by=2)]
#tmp_df = tmp_df[tmp_df$a == "1a" | tmp_df$b == "1a" ,]
# adjust pval n=nb of contrasts
#tmp_df[,"p.adjust"] <- p.adjust(tmp_df$p.value,"fdr",n=21)
#tmp_df[,"p.adjust"] <- p.adjust(tmp_df$p.value,"bonferroni",n=21)
tmp_df = cbind("OTU"=OTU,tmp_df)
glmT3s.pairwise.global = rbind(glmT3s.pairwise.global,tmp_df)
},
error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
rm(OTU,y,glmT3s,glmT3s.sum)
}
warnings()
# model with pairwise comparison ---------------------------------------------------------------------------------
glmT3s.sum.global = data.frame()
glmT3s.pairwise.global = data.frame()
for (i in 1:length(taxa_names(tmp_T3s))) {
OTU = taxa_names(tmp_T3s)[i]
# response variable
y = as.vector(tmp_T3s@otu_table[OTU,]@.Data)
tryCatch({
### model
glmT3s <- glmer(y ~ a.+b+c + (1 | z), family='poisson', offset = o)
glmT3s.sum = summary(glmT3s)$coefficients
#glmT3s.sum = summary(glmT3s)$coefficients$cond
glmT3s.sum = tibble("OTU"= OTU,
"treatment"=rownames(glmT3s.sum),
as_tibble(glmT3s.sum))
glmT3s.sum
glmT3s.sum.global = rbind(glmT3s.sum.global,glmT3s.sum)
### multiple comparaison
glmT3s.pairwise = emmeans(glmT3s, ~a.|b*c)
# select p value
glmT3s.pairwise.sum = summary(glmT3s.pairwise)
glmT3s.pairwise.sum = glmT3s.pairwise.sum[["contrasts"]]
# extract summary
tmp_df = glmT3s.pairwise.sum
# keep only comparisons of interest
#tmp = unlist(strsplit(as.character(tmp_df$contrast)," - "))
#tmp_df[,"a"] <- tmp[seq(1,length(tmp),by=2)]
#tmp_df[,"b"] <- tmp[seq(2,length(tmp),by=2)]
#tmp_df = tmp_df[tmp_df$a == "1a" | tmp_df$b == "1a" ,]
# adjust pval n=nb of contrasts
#tmp_df[,"p.adjust"] <- p.adjust(tmp_df$p.value,"fdr",n=21)
#tmp_df[,"p.adjust"] <- p.adjust(tmp_df$p.value,"bonferroni",n=21)
tmp_df = cbind("OTU"=OTU,tmp_df)
glmT3s.pairwise.global = rbind(glmT3s.pairwise.global,tmp_df)
},
error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
rm(OTU,y,glmT3s,glmT3s.sum)
}
glmT3s.model.global = glmT3s.sum.global
glmT3s.pairwise.global = glmT3s.pairwise.global
View(glmT3s.model.global)
View(glmT3s.pairwise.global)
glmT3s.sum
glmer(y ~ a.+b+c + (1 | z), family='poisson', offset = o)
OTU = taxa_names(tmp_T3s)
y = as.vector(tmp_T3s@otu_table[OTU,]@.Data)
y
glmer(y ~ a.+b+c + (1 | z), family='poisson', offset = o)
#  treatment
a = tibble("sample"= tmp_T3s@sam_data$SampleID,
#"date" = tmp_T3s@sam_data$Date,
#"fertilization" = tmp_T3s@sam_data$Treatment,
"treatment"= tmp_T3s@sam_data$Irrigation)
# force control as intercept
a[a == "Control"] <- "1a"
a = as.factor(a$treatment)
#a.ed = a$treatment
#a. <- as.factor(a.ed)
#b
#b <- as.factor(tmp_T3s@sam_data$Treatment)
#c
#c <- as.factor(tmp_T3s@sam_data$Date)
# offset
o = log(sample_sums(tmp_T3s))
# random effect
z <- as.factor(tmp_T3s@sam_data$SampleID)
# model with pairwise comparison ---------------------------------------------------------------------------------
glmT3s.sum.global = data.frame()
glmT3s.pairwise.global = data.frame()
#  treatment
a = tibble("sample"= tmp_T3s@sam_data$SampleID,
#"date" = tmp_T3s@sam_data$Date,
#"fertilization" = tmp_T3s@sam_data$Treatment,
"treatment"= tmp_T3s@sam_data$Irrigation)
# force control as intercept
a[a == "Control"] <- "1a"
a = as.factor(a$treatment)
#a.ed = a$treatment
#a. <- as.factor(a.ed)
#b
#b <- as.factor(tmp_T3s@sam_data$Treatment)
#c
#c <- as.factor(tmp_T3s@sam_data$Date)
# offset
o = log(sample_sums(tmp_T3s))
# random effect
z <- as.factor(tmp_T3s@sam_data$SampleID)
# model with pairwise comparison ---------------------------------------------------------------------------------
glmT3s.sum.global = data.frame()
glmT3s.pairwise.global = data.frame()
for (i in 1:length(taxa_names(tmp_T3s))) {
OTU = taxa_names(tmp_T3s)[i]
# response variable
y = as.vector(tmp_T3s@otu_table[OTU,]@.Data)
tryCatch({
### model
glmT3s <- glmer(y ~ a + (1 | z), family='poisson', offset = o)
glmT3s.sum = summary(glmT3s)$coefficients
#glmT3s.sum = summary(glmT3s)$coefficients$cond
glmT3s.sum = tibble("OTU"= OTU,
"treatment"=rownames(glmT3s.sum),
as_tibble(glmT3s.sum))
glmT3s.sum
glmT3s.sum.global = rbind(glmT3s.sum.global,glmT3s.sum)
### multiple comparaison
glmT3s.pairwise = emmeans(glmT3s,pairwise~a)
# select p value
glmT3s.pairwise.sum = summary(glmT3s.pairwise)
glmT3s.pairwise.sum = glmT3s.pairwise.sum[["contrasts"]]
# extract summary
tmp_df = glmT3s.pairwise.sum
# keep only comparisons of interest
#tmp = unlist(strsplit(as.character(tmp_df$contrast)," - "))
#tmp_df[,"a"] <- tmp[seq(1,length(tmp),by=2)]
#tmp_df[,"b"] <- tmp[seq(2,length(tmp),by=2)]
#tmp_df = tmp_df[tmp_df$a == "1a" | tmp_df$b == "1a" ,]
# adjust pval n=nb of contrasts
#tmp_df[,"p.adjust"] <- p.adjust(tmp_df$p.value,"fdr",n=21)
#tmp_df[,"p.adjust"] <- p.adjust(tmp_df$p.value,"bonferroni",n=21)
tmp_df = cbind("OTU"=OTU,tmp_df)
glmT3s.pairwise.global = rbind(glmT3s.pairwise.global,tmp_df)
},
error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
rm(OTU,y,glmT3s,glmT3s.sum)
}
glmT3s.model.global = glmT3s.sum.global
glmT3s.pairwise.global = glmT3s.pairwise.global
View(glmT3s.model.global)
View(glmT3s.pairwise.global)
View(metadata)
View(meta_micro)

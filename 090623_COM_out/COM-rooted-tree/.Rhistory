# keep only comparisons of interest
tmp = unlist(strsplit(as.character(tmp_df$contrast)," - "))
tmp_df[,"a"] <- tmp[seq(1,length(tmp),by=2)]
tmp_df[,"b"] <- tmp[seq(2,length(tmp),by=2)]
#tmp_df = tmp_df[grep("Ni",tmp_df$b), ]
tmp_df = cbind("OTU"=OTU,tmp_df)
# extract results in data frame
glmT3s.pairwise.global = rbind(glmT3s.pairwise.global,tmp_df)
},
error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
rm(OTU,y,glmT3s,glmT3s.sum)
}
glmT3s.model.global = glmT3s.sum.global
glmT3s.pairwise.global = glmT3s.pairwise.global
glmT3s.pairwise.global$p.adjust <- p.adjust(glmT3s.pairwise.global$p.value, method = "fdr")
## nb of pval <= 0.05 before and after filter
table(glmT3s.pairwise.global$p.value <= 0.05)
table(glmT3s.pairwise.global$p.adjust <= 0.05)
## nb of OTU with a pval <= 0.05 before and after filter
tmp_otu3s = unique(glmT3s.pairwise.global$OTU[glmT3s.pairwise.global$p.adjust <= 0.05])
glmT3s.pairwise.global.signif = glmT3s.pairwise.global[glmT3s.pairwise.global$p.adjust <=0.05,]
length(tmp_otu3s)
View(glmT3s.pairwise.global.signif)
#  treatment
a = tibble("sample"= as.factor(tmp_T3s@sam_data$SampleID),
"treatment"= as.character(tmp_T3s@sam_data$x))
a
# force control as intercept
#a[a == "Control"] <- "1a"
a = as.matrix(a$treatment)
# offset
o = log(sample_sums(tmp_T3s))
# random effect
z <- as.matrix(tmp_T3s@sam_data$SampleID)
# model with pairwise comparison ---------------------------------------------------------------------------------
glmT3s.sum.global = data.frame()
glmT3s.pairwise.global = data.frame()
for (i in 1:length(taxa_names(tmp_T3s))) {
OTU = taxa_names(tmp_T3s)[i]
# response variable
y = as.vector(tmp_T3s@otu_table[OTU,]@.Data)
tryCatch({
### model
glmT3s <- glmer(y ~ a + (1 | z), family='poisson',offset = o)
glmT3s.sum = summary(glmT3s)$coefficients
glmT3s.sum = tibble("OTU"= OTU,
"treatment"=rownames(glmT3s.sum),
as_tibble(glmT3s.sum))
glmT3s.sum
glmT3s.sum.global = rbind(glmT3s.sum.global,glmT3s.sum)
### multiple comparison
glmT3s.pairwise = emmeans(glmT3s,pairwise~a)
# select p value
glmT3s.pairwise.sum = summary(glmT3s.pairwise)
glmT3s.pairwise.sum = glmT3s.pairwise.sum[["contrasts"]]
# extract summary
tmp_df = glmT3s.pairwise.sum
# keep only comparisons of interest
tmp = unlist(strsplit(as.character(tmp_df$contrast)," - "))
tmp_df[,"a"] <- tmp[seq(1,length(tmp),by=2)]
tmp_df[,"b"] <- tmp[seq(2,length(tmp),by=2)]
#tmp_df = tmp_df[grep("Ni",tmp_df$b), ]
tmp_df = cbind("OTU"=OTU,tmp_df)
# extract results in data frame
glmT3s.pairwise.global = rbind(glmT3s.pairwise.global,tmp_df)
},
error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
rm(OTU,y,glmT3s,glmT3s.sum)
}
glmT3s.model.global = glmT3s.sum.global
glmT3s.pairwise.global = glmT3s.pairwise.global
glmT3s.pairwise.global$p.adjust <- p.adjust(glmT3s.pairwise.global$p.value, method = "fdr")
View(glmT3s.model.global)
nrow(glmT3s.pairwise.global[glmT3s.pairwise.global$p.value < glmT3s.pairwise.global$p.adjust,])
nrow(glmT3s.pairwise.global[glmT3s.pairwise.global$p.value > glmT3s.pairwise.global$p.adjust,])
nrow(glmT3s.pairwise.global[glmT3s.pairwise.global$p.value == glmT3s.pairwise.global$p.adjust,])
## nb of pval <= 0.05 before and after filter
table(glmT3s.pairwise.global$p.value <= 0.05)
table(glmT3s.pairwise.global$p.adjust <= 0.05)
## nb of OTU with a pval <= 0.05 before and after filter
tmp_otu3s = unique(glmT3s.pairwise.global$OTU[glmT3s.pairwise.global$p.adjust <= 0.05])
glmT3s.pairwise.global.signif = glmT3s.pairwise.global[glmT3s.pairwise.global$p.adjust <=0.05,]
length(tmp_otu3s)
View(glmT3s.pairwise.global)
# SET THE WORKING DIRECTORY
setwd('/Users/arifinabintarti/Documents/France/microservices/090623_COM_out/COM.ASV-analysis')
setwd('D:/Fina/INRAE_Project/microservices/090623_COM_out/COM.ASV-analysis')
wd <- print(getwd())
# load the asv table
com.asv <- read.table('annotated.COM.ASVs.counts.tsv', sep='\t', header=T, row.names = 1, check.names = FALSE)
dim(com.asv) # 686 192
# remove the bad sample (sample # 26) from the OTU table
com.asv.sub <- com.asv[, -which(names(com.asv) == "26" )]
sort(rowSums(com.asv.sub, na.rm = FALSE, dims = 1), decreasing = FALSE)
dim(com.asv.sub)
# load the taxonomy table
setwd('/Users/arifinabintarti/Documents/France/microservices/090623_COM_out/')
setwd('D:/Fina/INRAE_Project/microservices/090623_COM_out/')
com.tax <- read.table("besthit.diamond.output.curateddb.COM.ASVs.edited.csv", sep = ';', header=T)
dim(com.tax) # 680
# load the metadata
setwd('/Users/arifinabintarti/Documents/France/microservices/')
setwd('D:/Fina/INRAE_Project/microservices/')
meta_micro <- read.csv("meta_microservices.csv")
# remove the bad sample (sample # 26) from the metadata
meta_micro_sub <- meta_micro[-26,]
# load phylogenetic tree (nwk file)
setwd('D:/Fina/INRAE_Project/microservices/090623_COM_out/COM-rooted-tree/')
COM_rooted_tree <- ape::read.tree("tree.nwk")
re_order <- match(rownames(meta_micro_sub), colnames(com.asv.sub))
com.asv.ord  <- com.asv.sub[ ,re_order]
com.asv.physeq = otu_table(com.asv.ord, taxa_are_rows = TRUE) # asv table
sample_names(com.asv.physeq)
# adding "S" for sample names to avoid possible problem later on
sample_names(com.asv.physeq) <- paste0("S", sample_names(com.asv.physeq))
# phyloseq object of the taxonomy table
com.tax <- column_to_rownames(com.tax, var = "ASVid")
#row.names(com.tax) <- com.tax$ASVid
com.tax.physeq = tax_table(as.matrix(com.tax)) # taxonomy table
# phyloseq object of the metadata
meta_micro_sub$Date <- factor(meta_micro_sub$Date, levels = c("4/28/22", "6/1/22", "7/5/22", "7/20/22", "9/13/22"),
labels = c("04-28-22", "06-01-22", "07-05-22", "07-20-22", "09-13-22"))
rownames(meta_micro_sub) <- sample_names(com.asv.physeq)
com.meta.physeq <- sample_data(meta_micro_sub)# meta data
sample_names(com.meta.physeq)
# read the rooted tree
setwd('D:/Fina/INRAE_Project/microservices/090623_COM_out/COM-rooted-tree/')
COM_rooted_tree <- ape::read.tree("tree.nwk")
# make phyloseq object
com.physeq <- merge_phyloseq(com.asv.physeq,com.tax.physeq,com.meta.physeq,COM_rooted_tree)
com.physeq # 653 taxa
sample_data(com.physeq)$SampleID <- paste0("S", sample_data(com.physeq)$SampleID)
sample_data(com.physeq)
# run the ggrare function attached in the file "generating_rarecurve.r"
com.rare <- ggrare(com.physeq, step = 1, color = "Type", label = "SampleID", se = FALSE)
# rarefy to minimum sequencing depth (minimum reads =  reads)
set.seed(333)
com.rare.min.physeq <- rarefy_even_depth(com.physeq, sample.size = 5242,
rngseed = 333, replace = FALSE, trimOTUs = TRUE, verbose = TRUE)
com.rare.min.physeq #632 taxa
sort(sample_sums(com.rare.min.physeq), decreasing = F) # 21 OTUs were removed because they are no longer present in any sample after random subsampling
# 1 sample removed (S52)
sort(rowSums(otu_table(com.rare.min.physeq), na.rm = FALSE, dims = 1), decreasing = F)
################################################################################
# Filter low-abundant taxa
# keeping OTUs with at least 0.02 % relative abundance across all samples
physeq.subset <- dat04rawseq1
physeq.subset #424 Taxa, 24 Samples
data.obs <- as.data.frame(otu_table(physeq.subset))
keep.taxa.id=which((rowSums(data.obs)/sum(data.obs))>0.0002)
data.F=data.obs[keep.taxa.id,,drop=FALSE]
new.otu <- as.matrix(data.F) # convert it into a matrix.
new.otu <- otu_table(data.F, taxa_are_rows = TRUE) # convert into phyloseq compatible file.
otu_table(physeq.subset) <- new.otu # incorporate into phyloseq Object
physeq.subset # 264 taxa, 24 samples remain in the data set after filtering
################################################################################
#Lets generate a prevalence table (number of samples each taxa occurs in) for each taxa.
prevalencedf = apply(X = otu_table(physeq.subset),
MARGIN = 1,
FUN = function(x){sum(x > 0)})
# Add taxonomy and total read counts to this data.frame
prevalencedf = data.frame(Prevalence = prevalencedf,
TotalAbundance = taxa_sums(physeq.subset))
prevalencedf[1:10,]
dim(prevalencedf)
# calculate prevalence
ps = physeq.subset
df_tmp <- psmelt(ps)
df_tmp$sample <- 0
df_tmp$sample[df_tmp$Abundance > 0] <- 1 #E: DON'T UNDERSTAND WHY THIS IS DONE
df_otu_prev_ttt <- data.frame(matrix(ncol=nlevels(as.factor(df_tmp$x)),
nrow=nlevels(as.factor(df_tmp$OTU)),
dimnames=list(levels(as.factor(df_tmp$OTU)),
levels(as.factor(df_tmp$x)))))
#attention il ya Sample et sample
for (i in unique(df_tmp$OTU)) {
for (j in unique(df_tmp$x)) {
df_otu_prev_ttt[i,j] <- sum(df_tmp$sample[df_tmp$OTU == i & df_tmp$x == j],na.rm = T) / nrow(df_tmp[df_tmp$OTU == i & df_tmp$x == j,]) *100
print(paste(i,j,df_otu_prev_ttt[i,j]),sep="\t")
#print(df_otu_prev_ttt[i,j])
}
}
df_otu_prev_ttt$max_prev <- apply(df_otu_prev_ttt,MARGIN=1, FUN=max)
75/100*4
# filter otu par prevalence
physeq.subset
ps =  physeq.subset
df_prev = df_otu_prev_ttt
tmp_otu_F = rownames(df_prev[df_prev$max_prev >= 75,])
physeq.subset <- prune_taxa(taxa_names(ps) %in% tmp_otu_F, ps)
physeq.subset# 69 taxa, 23 samples
tmp_T3s <- physeq.subset
str(tmp_T3s)
#  treatment
a = tibble("sample"= as.factor(tmp_T3s@sam_data$SampleID),
"treatment"= as.character(tmp_T3s@sam_data$x))
# force control as intercept
#a[a == "Control"] <- "1a"
a = as.matrix(a$treatment)
# offset
o = log(sample_sums(tmp_T3s))
# random effect
z <- as.matrix(tmp_T3s@sam_data$SampleID)
# model with pairwise comparison ---------------------------------------------------------------------------------
glmT3s.sum.global = data.frame()
glmT3s.pairwise.global = data.frame()
for (i in 1:length(taxa_names(tmp_T3s))) {
OTU = taxa_names(tmp_T3s)[i]
# response variable
y = as.vector(tmp_T3s@otu_table[OTU,]@.Data)
tryCatch({
### model
glmT3s <- glmer(y ~ a + (1 | z), family='poisson',offset = o)
glmT3s.sum = summary(glmT3s)$coefficients
glmT3s.sum = tibble("OTU"= OTU,
"treatment"=rownames(glmT3s.sum),
as_tibble(glmT3s.sum))
glmT3s.sum
glmT3s.sum.global = rbind(glmT3s.sum.global,glmT3s.sum)
### multiple comparison
glmT3s.pairwise = emmeans(glmT3s,pairwise~a)
# select p value
glmT3s.pairwise.sum = summary(glmT3s.pairwise)
glmT3s.pairwise.sum = glmT3s.pairwise.sum[["contrasts"]]
# extract summary
tmp_df = glmT3s.pairwise.sum
# keep only comparisons of interest
tmp = unlist(strsplit(as.character(tmp_df$contrast)," - "))
tmp_df[,"a"] <- tmp[seq(1,length(tmp),by=2)]
tmp_df[,"b"] <- tmp[seq(2,length(tmp),by=2)]
#tmp_df = tmp_df[grep("Ni",tmp_df$b), ]
tmp_df = cbind("OTU"=OTU,tmp_df)
# extract results in data frame
glmT3s.pairwise.global = rbind(glmT3s.pairwise.global,tmp_df)
},
error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
rm(OTU,y,glmT3s,glmT3s.sum)
}
glmT3s.model.global = glmT3s.sum.global
glmT3s.pairwise.global = glmT3s.pairwise.global
glmT3s.pairwise.global$p.adjust <- p.adjust(glmT3s.pairwise.global$p.value, method = "fdr")
View(glmT3s.model.global)
View(glmT3s.pairwise.global)
tmp_T3s
dat04seq <- subset_samples(aob.physeq_bulk1, Date=="04-28-22")
dat04seq1 <- prune_taxa(taxa_sums(dat04seq)>0, dat04seq)
sort(rowSums(otu_table(dat04seq1), na.rm = FALSE, dims = 1), decreasing = F)
dat04seq1 #393 taxa, 23 samples
################################################################################
# Filter low-abundant taxa
# keeping OTUs with at least 0.02 % relative abundance across all samples
physeq.subset <- dat04seq1
physeq.subset #393 Taxa, 23 Samples
data.obs <- as.data.frame(otu_table(physeq.subset))
keep.taxa.id=which((rowSums(data.obs)/sum(data.obs))>0.0002)
data.F=data.obs[keep.taxa.id,,drop=FALSE]
new.otu <- as.matrix(data.F) # convert it into a matrix.
new.otu <- otu_table(data.F, taxa_are_rows = TRUE) # convert into phyloseq compatible file.
otu_table(physeq.subset) <- new.otu # incorporate into phyloseq Object
physeq.subset # 254 taxa, 23 samples remain in the data set after filtering
################################################################################
#Lets generate a prevalence table (number of samples each taxa occurs in) for each taxa.
prevalencedf = apply(X = otu_table(physeq.subset),
MARGIN = 1,
FUN = function(x){sum(x > 0)})
# Add taxonomy and total read counts to this data.frame
prevalencedf = data.frame(Prevalence = prevalencedf,
TotalAbundance = taxa_sums(physeq.subset))
prevalencedf[1:10,]
dim(prevalencedf)
# calculate prevalence
ps = physeq.subset
df_tmp <- psmelt(ps)
df_tmp$sample <- 0
df_tmp$sample[df_tmp$Abundance > 0] <- 1 #E: DON'T UNDERSTAND WHY THIS IS DONE
df_otu_prev_ttt <- data.frame(matrix(ncol=nlevels(as.factor(df_tmp$x)),
nrow=nlevels(as.factor(df_tmp$OTU)),
dimnames=list(levels(as.factor(df_tmp$OTU)),
levels(as.factor(df_tmp$x)))))
#attention il ya Sample et sample
for (i in unique(df_tmp$OTU)) {
for (j in unique(df_tmp$x)) {
df_otu_prev_ttt[i,j] <- sum(df_tmp$sample[df_tmp$OTU == i & df_tmp$x == j],na.rm = T) / nrow(df_tmp[df_tmp$OTU == i & df_tmp$x == j,]) *100
print(paste(i,j,df_otu_prev_ttt[i,j]),sep="\t")
#print(df_otu_prev_ttt[i,j])
}
}
df_otu_prev_ttt$max_prev <- apply(df_otu_prev_ttt,MARGIN=1, FUN=max)
# filter otu par prevalence
physeq.subset
ps =  physeq.subset
df_prev = df_otu_prev_ttt
tmp_otu_F = rownames(df_prev[df_prev$max_prev >= 75,])
physeq.subset <- prune_taxa(taxa_names(ps) %in% tmp_otu_F, ps)
physeq.subset# 63 taxa, 23 samples
tmp_T3s <- physeq.subset
str(tmp_T3s)
#  treatment
a = tibble("sample"= as.factor(tmp_T3s@sam_data$SampleID),
"treatment"= as.character(tmp_T3s@sam_data$x))
# force control as intercept
#a[a == "Control"] <- "1a"
a = as.matrix(a$treatment)
# offset
o = log(sample_sums(tmp_T3s))
# random effect
z <- as.matrix(tmp_T3s@sam_data$SampleID)
# model with pairwise comparison ---------------------------------------------------------------------------------
glmT3s.sum.global = data.frame()
glmT3s.pairwise.global = data.frame()
for (i in 1:length(taxa_names(tmp_T3s))) {
OTU = taxa_names(tmp_T3s)[i]
# response variable
y = as.vector(tmp_T3s@otu_table[OTU,]@.Data)
tryCatch({
### model
glmT3s <- glmer(y ~ a + (1 | z), family='poisson',offset = o)
glmT3s.sum = summary(glmT3s)$coefficients
glmT3s.sum = tibble("OTU"= OTU,
"treatment"=rownames(glmT3s.sum),
as_tibble(glmT3s.sum))
glmT3s.sum
glmT3s.sum.global = rbind(glmT3s.sum.global,glmT3s.sum)
### multiple comparison
glmT3s.pairwise = emmeans(glmT3s,pairwise~a)
# select p value
glmT3s.pairwise.sum = summary(glmT3s.pairwise)
glmT3s.pairwise.sum = glmT3s.pairwise.sum[["contrasts"]]
# extract summary
tmp_df = glmT3s.pairwise.sum
# keep only comparisons of interest
tmp = unlist(strsplit(as.character(tmp_df$contrast)," - "))
tmp_df[,"a"] <- tmp[seq(1,length(tmp),by=2)]
tmp_df[,"b"] <- tmp[seq(2,length(tmp),by=2)]
#tmp_df = tmp_df[grep("Ni",tmp_df$b), ]
tmp_df = cbind("OTU"=OTU,tmp_df)
# extract results in data frame
glmT3s.pairwise.global = rbind(glmT3s.pairwise.global,tmp_df)
},
error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
rm(OTU,y,glmT3s,glmT3s.sum)
}
glmT3s.model.global.rare = glmT3s.sum.global
glmT3s.pairwise.global.rare = glmT3s.pairwise.global
View(glmT3s.model.global.rare)
View(glmT3s.pairwise.global.rare)
glmT3s.pairwise.global.rare$p.adjust <- p.adjust(glmT3s.pairwise.global.rare$p.value, method = "fdr")
## nb of pval <= 0.05 before and after filter
table(glmT3s.pairwise.global.rare$p.value <= 0.05)
table(glmT3s.pairwise.global.rare$p.adjust <= 0.05)
## nb of OTU with a pval <= 0.05 before and after filter
tmp_otu3s.rare = unique(glmT3s.pairwise.global.rare$OTU[glmT3s.pairwise.global.rare$p.adjust <= 0.05])
glmT3s.pairwise.global.signif.rare = glmT3s.pairwise.global.rare[glmT3s.pairwise.global.rare$p.adjust <=0.05,]
View(glmT3s.pairwise.global.signif.rare)
# model with pairwise comparison ---------------------------------------------------------------------------------
glmT3s.sum.global = data.frame()
glmT3s.pairwise.global = data.frame()
for (i in 1:length(taxa_names(tmp_T3s))) {
OTU = taxa_names(tmp_T3s)[i]
# response variable
y = as.vector(tmp_T3s@otu_table[OTU,]@.Data)
tryCatch({
### model
glmT3s <- glmer(y ~ a + (1 | z), family='poisson',offset = o)
glmT3s.sum = summary(glmT3s)$coefficients
glmT3s.sum = tibble("OTU"= OTU,
"treatment"=rownames(glmT3s.sum),
as_tibble(glmT3s.sum))
glmT3s.sum
glmT3s.sum.global = rbind(glmT3s.sum.global,glmT3s.sum)
### multiple comparison
glmT3s.pairwise = emmeans(glmT3s,pairwise~a)
# select p value
glmT3s.pairwise.sum = summary(glmT3s.pairwise)
glmT3s.pairwise.sum = glmT3s.pairwise.sum[["contrasts"]]
# extract summary
tmp_df = glmT3s.pairwise.sum
# keep only comparisons of interest
tmp = unlist(strsplit(as.character(tmp_df$contrast)," - "))
tmp_df[,"a"] <- tmp[seq(1,length(tmp),by=2)]
tmp_df[,"b"] <- tmp[seq(2,length(tmp),by=2)]
#tmp_df = tmp_df[grep("Ni",tmp_df$b), ]
tmp_df = cbind("OTU"=OTU,tmp_df)
# extract results in data frame
glmT3s.pairwise.global = rbind(glmT3s.pairwise.global,tmp_df)
},
error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
rm(OTU,y,glmT3s,glmT3s.sum)
}
glmT3s.model.global.rare = glmT3s.sum.global
glmT3s.pairwise.global.rare = glmT3s.pairwise.global
glmT3s.pairwise.global.rare.ed <- subset(glmT3s.pairwise.global.rare,glmT3s.pairwise.global.rare$contrast=="cont.D - rain.D" | glmT3s.pairwise.global.rare$contrast=="cont.M - rain.M" | glmT3s.pairwise.global.rare$contrast=="cont.K - rain.K")
glmT3s.pairwise.global.ed$p.adjust <- p.adjust(glmT3s.pairwise.global.ed$p.value, method = "fdr")
glmT3s.pairwise.global.rare.ed <- subset(glmT3s.pairwise.global.rare,glmT3s.pairwise.global.rare$contrast=="cont.D - rain.D" | glmT3s.pairwise.global.rare$contrast=="cont.M - rain.M" | glmT3s.pairwise.global.rare$contrast=="cont.K - rain.K")
glmT3s.pairwise.global.rare.ed$p.adjust <- p.adjust(glmT3s.pairwise.global.rare.ed$p.value, method = "fdr")
View(glmT3s.pairwise.global.rare.ed)
## nb of pval <= 0.05 before and after filter
table(glmT3s.pairwise.global.rare.ed$p.value <= 0.05)
table(glmT3s.pairwise.global.rare.ed$p.adjust <= 0.05)
## nb of OTU with a pval <= 0.05 before and after filter
tmp_otu3s.rare.ed = unique(glmT3s.pairwise.global.rare.ed$OTU[glmT3s.pairwise.global.rare.ed$p.adjust <= 0.05])
glmT3s.pairwise.global.signif.rare.ed = glmT3s.pairwise.global.rare.ed[glmT3s.pairwise.global.rare.ed$p.adjust <=0.05,]
View(glmT3s.pairwise.global.signif.rare.ed)
dat04rawseq <- subset_samples(aob.bulk.rawseq1, Date=="04-28-22")
dat04rawseq1 <- prune_taxa(taxa_sums(dat04rawseq)>0, dat04rawseq)
sort(rowSums(otu_table(dat04rawseq1), na.rm = FALSE, dims = 1), decreasing = F)
dat04rawseq1 #424 taxa, 24 samples
################################################################################
# Filter low-abundant taxa
# keeping OTUs with at least 0.02 % relative abundance across all samples
physeq.subset <- dat04rawseq1
physeq.subset #424 Taxa, 24 Samples
data.obs <- as.data.frame(otu_table(physeq.subset))
keep.taxa.id=which((rowSums(data.obs)/sum(data.obs))>0.0002)
data.F=data.obs[keep.taxa.id,,drop=FALSE]
new.otu <- as.matrix(data.F) # convert it into a matrix.
new.otu <- otu_table(data.F, taxa_are_rows = TRUE) # convert into phyloseq compatible file.
otu_table(physeq.subset) <- new.otu # incorporate into phyloseq Object
physeq.subset # 264 taxa, 24 samples remain in the data set after filtering
################################################################################
#Lets generate a prevalence table (number of samples each taxa occurs in) for each taxa.
prevalencedf = apply(X = otu_table(physeq.subset),
MARGIN = 1,
FUN = function(x){sum(x > 0)})
# Add taxonomy and total read counts to this data.frame
prevalencedf = data.frame(Prevalence = prevalencedf,
TotalAbundance = taxa_sums(physeq.subset))
prevalencedf[1:10,]
dim(prevalencedf)
# calculate prevalence
ps = physeq.subset
df_tmp <- psmelt(ps)
df_tmp$sample <- 0
df_tmp$sample[df_tmp$Abundance > 0] <- 1 #E: DON'T UNDERSTAND WHY THIS IS DONE
df_otu_prev_ttt <- data.frame(matrix(ncol=nlevels(as.factor(df_tmp$x)),
nrow=nlevels(as.factor(df_tmp$OTU)),
dimnames=list(levels(as.factor(df_tmp$OTU)),
levels(as.factor(df_tmp$x)))))
#attention il ya Sample et sample
for (i in unique(df_tmp$OTU)) {
for (j in unique(df_tmp$x)) {
df_otu_prev_ttt[i,j] <- sum(df_tmp$sample[df_tmp$OTU == i & df_tmp$x == j],na.rm = T) / nrow(df_tmp[df_tmp$OTU == i & df_tmp$x == j,]) *100
print(paste(i,j,df_otu_prev_ttt[i,j]),sep="\t")
#print(df_otu_prev_ttt[i,j])
}
}
df_otu_prev_ttt$max_prev <- apply(df_otu_prev_ttt,MARGIN=1, FUN=max)
# filter otu par prevalence
physeq.subset
ps =  physeq.subset
df_prev = df_otu_prev_ttt
tmp_otu_F = rownames(df_prev[df_prev$max_prev >= 75,])
physeq.subset <- prune_taxa(taxa_names(ps) %in% tmp_otu_F, ps)
physeq.subset# 69 taxa, 23 samples
tmp_T3s <- physeq.subset
str(tmp_T3s)
#  treatment
a = tibble("sample"= as.factor(tmp_T3s@sam_data$SampleID),
"treatment"= as.character(tmp_T3s@sam_data$x))
# force control as intercept
#a[a == "Control"] <- "1a"
a = as.matrix(a$treatment)
# offset
o = log(sample_sums(tmp_T3s))
# random effect
z <- as.matrix(tmp_T3s@sam_data$SampleID)
# model with pairwise comparison ---------------------------------------------------------------------------------
glmT3s.sum.global = data.frame()
glmT3s.pairwise.global = data.frame()
for (i in 1:length(taxa_names(tmp_T3s))) {
OTU = taxa_names(tmp_T3s)[i]
# response variable
y = as.vector(tmp_T3s@otu_table[OTU,]@.Data)
tryCatch({
### model
glmT3s <- glmer(y ~ a + (1 | z), family='poisson',offset = o)
glmT3s.sum = summary(glmT3s)$coefficients
glmT3s.sum = tibble("OTU"= OTU,
"treatment"=rownames(glmT3s.sum),
as_tibble(glmT3s.sum))
glmT3s.sum
glmT3s.sum.global = rbind(glmT3s.sum.global,glmT3s.sum)
### multiple comparison
glmT3s.pairwise = emmeans(glmT3s,pairwise~a)
# select p value
glmT3s.pairwise.sum = summary(glmT3s.pairwise)
glmT3s.pairwise.sum = glmT3s.pairwise.sum[["contrasts"]]
# extract summary
tmp_df = glmT3s.pairwise.sum
# keep only comparisons of interest
tmp = unlist(strsplit(as.character(tmp_df$contrast)," - "))
tmp_df[,"a"] <- tmp[seq(1,length(tmp),by=2)]
tmp_df[,"b"] <- tmp[seq(2,length(tmp),by=2)]
#tmp_df = tmp_df[grep("Ni",tmp_df$b), ]
tmp_df = cbind("OTU"=OTU,tmp_df)
# extract results in data frame
glmT3s.pairwise.global = rbind(glmT3s.pairwise.global,tmp_df)
},
error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
rm(OTU,y,glmT3s,glmT3s.sum)
}
glmT3s.model.global = glmT3s.sum.global
glmT3s.pairwise.global = glmT3s.pairwise.global
glmT3s.pairwise.global$p.adjust <- p.adjust(glmT3s.pairwise.global$p.value, method = "fdr")
View(glmT3s.pairwise.global)
## nb of pval <= 0.05 before and after filter
table(glmT3s.pairwise.global$p.value <= 0.05)
table(glmT3s.pairwise.global$p.adjust <= 0.05)
## nb of OTU with a pval <= 0.05 before and after filter
tmp_otu3s = unique(glmT3s.pairwise.global$OTU[glmT3s.pairwise.global$p.adjust <= 0.05])
glmT3s.pairwise.global.signif = glmT3s.pairwise.global[glmT3s.pairwise.global$p.adjust <=0.05,]
View(glmT3s.pairwise.global.signif)

tab.distance.C <- subset(tab.distance, Label%in% c("Between cont.M and rain.M","Between cont.D and rain.D","Between cont.K and rain.K","Within cont.D","Within cont.M","Within cont.K", "Within rain.D","Within rain.M","Within rain.K"))
kruskal.test(Distance ~ Label,
data = tab.distance.C)
### NemenyiTes
tab.distance$Label <- as.factor(tab.distance$Label)
PT = PMCMRplus::kwAllPairsNemenyiTest(x=tab.distance.C$Distance, g=tab.distance.C$Label,
dist="Tukey")
PT = PT$p.value
PT
PT1 = fullPTable(PT)
Tukey <- multcompLetters(PT1,
compare="<",
threshold=0.05,
Letters=letters,
reversed = FALSE)
Tukey <- as.data.frame(Tukey$Letters)
colnames(Tukey) <- c("Letters")
Tukey$Label <- rownames(Tukey)
Tukey
treatOrderC <- factor(c("Between cont.M and rain.M","Between cont.D and rain.D","Between cont.K and rain.K","Within cont.D","Within cont.M","Within cont.K", "Within rain.D","Within rain.M","Within rain.K"))
tuckeyGroups <- data.frame(Label = Tukey$Label,Groups = Tukey$Letters)
tuckeyGroups <- tuckeyGroups[match(treatOrderC , tuckeyGroups$Label),]
tuckeyGroups$Label <- reorder.factor(tuckeyGroups$Label, new.order = treatOrderC )
sumData <- ddply(tab.distance.C, "Label", summarise,
N    = length(Distance),
Mean = mean(Distance),
Sd   = sd(Distance),
Se   = Sd / sqrt(N)
)
CONTROL<- ggplot(sumData, aes(x = Label, y = Mean)) +
geom_bar(stat="identity",
colour="black", # Use black outlines,
linewidth=.3) +      # Thinner lines
geom_errorbar(aes(ymin = Mean - Se, ymax = Mean + Se),
linewidth=.3,    # Thinner lines
width=.2,
position=position_dodge(.9)) +
geom_text(data=tuckeyGroups,aes(x=Label, y = sumData$Mean + sumData$Sd, label=Groups), vjust=-2) +
ylab("Bray-Curtis Distances") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
CONTROL
dunnTest(Distance ~ Label,
data = tab.distance.C, method = "bh")
PT
PT = PMCMRplus::kwAllPairsNemenyiTest(x=tab.distance.C$Distance, g=tab.distance.C$Label,
dist="Tukey")
PT
PT$p.value
PT1
dunn=dunnTest(Distance ~ Label,
data = tab.distance.C, method = "bh")
dunn
dunn$res
dunn$dtres
dunn$method
PT = PMCMRplus::kwAllPairsNemenyiTest(x=tab.distance.C$Distance, g=tab.distance.C$Label,
dist="Tukey")
PT = PT$p.value
PT
PT1 = fullPTable(PT)
PT1
str(PT1)
View(PT1)
dunn$res
res=dunn$res
View(res)
View(PT)
PT = PMCMRplus::kwAllPairsNemenyiTest(x=tab.distance.C$Distance, g=tab.distance.C$Label,
dist="Tukey")
PT
Tukey
library(rcompanion)
CLD = cldList(P.adj ~ Comparison, data=dunn$res)
CL
CLD
Tukey
CLD
tab.distance.C
tuckeyGroups
sumData
tuckeyGroups
CLD
sumData
CONTROL<- ggplot(sumData, aes(x = Label, y = Mean)) +
geom_bar(stat="identity",
colour="black", # Use black outlines,
linewidth=.3) +      # Thinner lines
geom_errorbar(aes(ymin = Mean - Se, ymax = Mean + Se),
linewidth=.3,    # Thinner lines
width=.2,
position=position_dodge(.9)) +
geom_text(data=CLD,aes(x=Group, y = sumData$Mean + sumData$Sd, label=Letter), vjust=-2) +
ylab("Bray-Curtis Distances") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
CONTROL
tuckeyGroups
rownames(CLD) = sumData$Label
CLD
CLD = rownames_to_column(CLD, var="Label")
CLD
CONTROL<- ggplot(sumData, aes(x = Label, y = Mean)) +
geom_bar(stat="identity",
colour="black", # Use black outlines,
linewidth=.3) +      # Thinner lines
geom_errorbar(aes(ymin = Mean - Se, ymax = Mean + Se),
linewidth=.3,    # Thinner lines
width=.2,
position=position_dodge(.9)) +
geom_text(data=CLD,aes(x=Label, y = sumData$Mean + sumData$Sd, label=Letter), vjust=-2) +
ylab("Bray-Curtis Distances") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
CONTROL
item_groups <- sample_data(aoa.physeq_bulk1)
item_groups <- item_groups$x
#calculate dist between groups
d.calcul <- dist_groups(aoa.cap.bulk.dist, item_groups)
#Control
tab.distance = as_tibble(d.calcul)
tab.distance.C <- subset(tab.distance, Label%in% c("Between cont.M and rain.M","Between cont.D and rain.D","Between cont.K and rain.K","Within cont.D","Within cont.M","Within cont.K", "Within rain.D","Within rain.M","Within rain.K"))
dunn=dunnTest(Distance ~ Label,
data = tab.distance.C, method = "bh")
library(rcompanion)
CLD = cldList(P.adj ~ Comparison, data=dunn$res)
CLD
sumData <- ddply(tab.distance.C, "Label", summarise,
N    = length(Distance),
Mean = mean(Distance),
Sd   = sd(Distance),
Se   = Sd / sqrt(N)
)
rownames(CLD) = sumData$Label
CLD = rownames_to_column(CLD, var="Label")
CONTROL<- ggplot(sumData, aes(x = Label, y = Mean)) +
geom_bar(stat="identity",
colour="black", # Use black outlines,
linewidth=.3) +      # Thinner lines
geom_errorbar(aes(ymin = Mean - Se, ymax = Mean + Se),
linewidth=.3,    # Thinner lines
width=.2,
position=position_dodge(.9)) +
geom_text(data=CLD,aes(x=Label, y = sumData$Mean + sumData$Sd, label=Letter), vjust=-2) +
ylab("Bray-Curtis Distances") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
CONTROL
CONTROL<- ggplot(sumData, aes(x = Label, y = Mean)) +
geom_bar(stat="identity",
colour="black", # Use black outlines,
linewidth=.3) +      # Thinner lines
geom_errorbar(aes(ymin = Mean - Se, ymax = Mean + Se),
linewidth=.3,    # Thinner lines
width=.2,
position=position_dodge(.9)) +
geom_text(data=CLD,aes(x=Label, y = sumData$Mean + sumData$Sd, label=Letter), vjust=0) +
ylab("Bray-Curtis Distances") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
CONTROL
CONTROL<- ggplot(sumData, aes(x = Label, y = Mean)) +
geom_bar(stat="identity",
colour="black", # Use black outlines,
linewidth=.3) +      # Thinner lines
geom_errorbar(aes(ymin = Mean - Se, ymax = Mean + Se),
linewidth=.3,    # Thinner lines
width=.2,
position=position_dodge(.9)) +
geom_text(data=CLD,aes(x=Label, y = sumData$Mean + sumData$Sd, label=Letter), vjust=-5) +
ylab("Bray-Curtis Distances") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
CONTROL
sumData
#calculate dist between groups
d.calcul <- dist_groups(aoa.bulk_dist_bc, item_groups)
#Control
tab.distance = as_tibble(d.calcul)
tab.distance.C <- subset(tab.distance, Label%in% c("Between cont.M and rain.M","Between cont.D and rain.D","Between cont.K and rain.K","Within cont.D","Within cont.M","Within cont.K", "Within rain.D","Within rain.M","Within rain.K"))
dunn=dunnTest(Distance ~ Label,
data = tab.distance.C, method = "bh")
library(rcompanion)
CLD = cldList(P.adj ~ Comparison, data=dunn$res)
sumData <- ddply(tab.distance.C, "Label", summarise,
N    = length(Distance),
Mean = mean(Distance),
Sd   = sd(Distance),
Se   = Sd / sqrt(N)
)
rownames(CLD) = sumData$Label
CLD = rownames_to_column(CLD, var="Label")
CONTROL<- ggplot(sumData, aes(x = Label, y = Mean)) +
geom_bar(stat="identity",
colour="black", # Use black outlines,
linewidth=.3) +      # Thinner lines
geom_errorbar(aes(ymin = Mean - Se, ymax = Mean + Se),
linewidth=.3,    # Thinner lines
width=.2,
position=position_dodge(.9)) +
geom_text(data=CLD,aes(x=Label, y = sumData$Mean + sumData$Sd, label=Letter), vjust=-5) +
ylab("Bray-Curtis Distances") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
CONTROL
sumData
aoa.cap.bulk.dist
aoa.cap.bulk.dist <- dist(aoa.cap.bulk$PCoA)
aoa.cap.bulk.dist
#calculate dist between groups
d.calcul <- dist_groups(aoa.cap.bulk.dist, item_groups)
#Control
tab.distance = as_tibble(d.calcul)
tab.distance.C <- subset(tab.distance, Label%in% c("Between cont.M and rain.M","Between cont.D and rain.D","Between cont.K and rain.K","Within cont.D","Within cont.M","Within cont.K", "Within rain.D","Within rain.M","Within rain.K"))
kruskal.test(Distance ~ Label,
data = tab.distance.C)
dunn=dunnTest(Distance ~ Label,
data = tab.distance.C, method = "bh")
library(rcompanion)
CLD = cldList(P.adj ~ Comparison, data=dunn$res)
CLD
sumData <- ddply(tab.distance.C, "Label", summarise,
N    = length(Distance),
Mean = mean(Distance),
Sd   = sd(Distance),
Se   = Sd / sqrt(N)
)
rownames(CLD) = sumData$Label
CLD = rownames_to_column(CLD, var="Label")
CONTROL<- ggplot(sumData, aes(x = Label, y = Mean)) +
geom_bar(stat="identity",
colour="black", # Use black outlines,
linewidth=.3) +      # Thinner lines
geom_errorbar(aes(ymin = Mean - Se, ymax = Mean + Se),
linewidth=.3,    # Thinner lines
width=.2,
position=position_dodge(.9)) +
geom_text(data=CLD,aes(x=Label, y = sumData$Mean + sumData$Sd, label=Letter), vjust=-5) +
ylab("Bray-Curtis Distances") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
CONTROL
CLD
CLD = cldList(P.adj ~ Comparison, data=dunn$res)
CLD
NemenyiTest(x=tab.distance.C$Distance, g=tab.distance.C$Label,
dist="Tukey")
posthoc.kruskal.nemenyi.test(x=tab.distance.C$Distance, g=tab.distance.C$Label,
dist="Tukey")
################################################################################################################################################
###################################################################
#######################Unifrac distance between treatments
#devtools::install_github("kylebittinger/usedist")
#install.packages("PMCMRplus")
#install.packages("gdata")
install.packages("PMCMR")
################################################################################################################################################
###################################################################
#######################Unifrac distance between treatments
#devtools::install_github("kylebittinger/usedist")
#install.packages("PMCMRplus")
#install.packages("gdata")
#install.packages("PMCMR")
library(PMCMR)
posthoc.kruskal.nemenyi.test(x=tab.distance.C$Distance, g=tab.distance.C$Label,
dist="Tukey")
PT = PMCMRplus::kwAllPairsNemenyiTest(x=tab.distance.C$Distance, g=tab.distance.C$Label,
dist="Tukey")
PT
dunn$res
PT = PT$p.value
PT
PT1 = fullPTable(PT)
PT1
CONTROL<- ggplot(sumData, aes(x = Label, y = Mean)) +
geom_bar(stat="identity",
colour="black", # Use black outlines,
linewidth=.3) +      # Thinner lines
geom_errorbar(aes(ymin = Mean - Se, ymax = Mean + Se),
linewidth=.3,    # Thinner lines
width=.2,
position=position_dodge(.9)) +
geom_text(data=CLD,aes(x=Label, y = sumData$Mean + sumData$Sd, label=Letter), vjust=-10) +
ylab("Bray-Curtis Distances") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
CONTROL
CLD = cldList(P.adj ~ Comparison, data=dunn$res)
rownames(CLD) = sumData$Label
CLD = rownames_to_column(CLD, var="Label")
CONTROL<- ggplot(sumData, aes(x = Label, y = Mean)) +
geom_bar(stat="identity",
colour="black", # Use black outlines,
linewidth=.3) +      # Thinner lines
geom_errorbar(aes(ymin = Mean - Se, ymax = Mean + Se),
linewidth=.3,    # Thinner lines
width=.2,
position=position_dodge(.9)) +
geom_text(data=CLD,aes(x=Label, y = sumData$Mean + sumData$Sd, label=Letter), vjust=-10) +
ylab("Bray-Curtis Distances") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
CONTROL
CONTROL<- ggplot(sumData, aes(x = Label, y = Mean)) +
geom_bar(stat="identity",
colour="black", # Use black outlines,
linewidth=.3) +      # Thinner lines
geom_errorbar(aes(ymin = Mean - Se, ymax = Mean + Se),
linewidth=.3,    # Thinner lines
width=.2,
position=position_dodge(.9)) +
geom_text(data=CLD,aes(x=Label, y = sumData$Mean + sumData$Sd, label=Letter), vjust=0) +
ylab("Bray-Curtis Distances") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
CONTROL
aoa.cap.bulk.dist
#calculate dist between groups
d.calcul <- dist_groups(aoa.cap.bulk.dist, item_groups)
aoa.cap.bulk.dist <- dist(aoa.cap.bulk$PCoA)
#Control
tab.distance = as_tibble(d.calcul)
#tab.distance.C <- subset(tab.distance, Label%in% c("Between cont.M and rain.M","Between cont.D and rain.D","Between cont.K and rain.K","Within cont.D","Within cont.M","Within cont.K", "Within rain.D","Within rain.M","Within rain.K"))
tab.distance.C <- subset(tab.distance, Label%in% c("Between cont.M and rain.M","Within cont.M","Within rain.M"))
kruskal.test(Distance ~ Label,
data = tab.distance.C)
dunn=dunnTest(Distance ~ Label,
data = tab.distance.C, method = "bh")
dunn
aoa_bray <- aoa.bulk_dist_bc
aoa_bray <- as.matrix(aoa_bray)
head(aoa_bray)[,1:6]
sub_dist <- list()
sample_data(aoa.physeq_bulk)
groups_aoa <- sample_data(aoa.physeq_bulk)$x
groups_aoa
for (group in levels(groups_aoa)) {
row_group <- which(groups_aoa == group)
sample_group <- sample_names(relab_genera)[row_group]
sub_dist[[group]] <- aoa_bray[ sample_group, sample_group]
sub_dist[[group]][!lower.tri(sub_dist[[group]])] <- NA
}
braygroups<- melt(sub_dist)
df.bray <- braygroups[complete.cases(braygroups), ]
# wrangle distance matrix into a longer dataframe
tmp_dist_matrix = melt(as.matrix(aoa.bulk_dist_bc))
# remove self-comparisons
tmp_dist_matrix = tmp_dist_matrix[tmp_dist_matrix$Var1 != tmp_dist_matrix$Var2,]
# select sample data
tmp_sam_data = tibble("sample"=rownames(aoa.meta.bulk),
"treatment"=aoa.meta.bulk$x)
# combined distance matrix with sample data
colnames(tmp_sam_data) = c("Var1", "treatment1")
tmp_data <- left_join(tmp_dist_matrix, tmp_sam_data, by = "Var1")
colnames(tmp_sam_data) = c("Var2", "treatment2")
tmp_data <- left_join(tmp_data, tmp_sam_data, by = "Var2")
View(tmp_data)
tmp_lm = kruskal.test(tmp_data$value ~ tmp_data$treatment2, na.action = na.omit)
tmp_lm
dunnTest(tmp_data$value ~ as.factor(tmp_data$treatment2), method = "bh")
tmp_data$value
View(tmp_data)
#calculate dist between groups
d.calcul <- dist_groups(aoa.bulk_dist_bc, item_groups)
#Control
tab.distance = as_tibble(d.calcul)
#tab.distance.C <- subset(tab.distance, Label%in% c("Between cont.M and rain.M","Between cont.D and rain.D","Between cont.K and rain.K","Within cont.D","Within cont.M","Within cont.K", "Within rain.D","Within rain.M","Within rain.K"))
tab.distance.C <- subset(tab.distance, Label%in% c("Between cont.M and rain.M","Within cont.M","Within rain.M"))
kruskal.test(Distance ~ Label,
data = tab.distance.C)
dunn=dunnTest(Distance ~ Label,
data = tab.distance.C, method = "bh")
dunn
#tab.distance.C <- subset(tab.distance, Label%in% c("Between cont.M and rain.M","Between cont.D and rain.D","Between cont.K and rain.K","Within cont.D","Within cont.M","Within cont.K", "Within rain.D","Within rain.M","Within rain.K"))
tab.distance.C <- subset(tab.distance, Label%in% c("Between cont.K and rain.K","Within cont.K","Within rain.K"))
kruskal.test(Distance ~ Label,
data = tab.distance.C)
dunn=dunnTest(Distance ~ Label,
data = tab.distance.C, method = "bh")
dunn
# rarefied AOB ASV table of bulk soil
aob.physeq_bulk <- subset_samples(aob.rare.1282.seq, Type=="BS") #subset bulk soil from phyloseq object
aob.physeq_bulk1 <- prune_taxa(taxa_sums(aob.physeq_bulk)>0, aob.physeq_bulk)
aob.physeq_bulk1
aob.asv.tab <- as.data.frame(otu_table(aob.physeq_bulk1))
dim(aob.asv.tab)
# rarefied AOB ASV table of bulk soil
aoa.physeq_bulk <- subset_samples(aoa.rare.min.physeq, Type=="BS")
aoa.physeq_bulk1 <- prune_taxa(taxa_sums(aoa.physeq_bulk)>0, aoa.physeq_bulk)
aoa.physeq_bulk1
aoa.asv.tab <- as.data.frame(otu_table(aoa.physeq_bulk1))
dim(aoa.asv.tab)
aoa.meta.df
dim(aoa.meta.df)
# enviromental data
str(aoa.meta.bulk)
# taxonomy table AOA
aob.asv.tax <- as.data.frame(tax_table(aob.physeq_bulk1))
dim(aob.asv.tax)
# taxonomy table AOA
aoa.asv.tax <- as.data.frame(tax_table(aoa.physeq_bulk1))
dim(aoa.asv.tax)
aoa.asv.tax$Group <- 'AOA'#adding a new column with AOB as value
aoa.asv.env <- aoa.asv.env %>%
dplyr::rename("AOA_Richness" = "Richness",
"AOA_Shannon" = "Shannon",
"AOA_InvSimpson" = "InvSimpson") # change column names
aoa.asv.env <- aoa.meta.bulk %>%
dplyr::rename("AOA_Richness" = "Richness",
"AOA_Shannon" = "Shannon",
"AOA_InvSimpson" = "InvSimpson") # change column names
aoa.asv.env <- aoa.asv.env %>% mutate_at(c('GWC_g_g', 'TS', 'NH4', 'NO3', 'Nmin_tot', 'C_tot', 'N_tot', 'pH', 'K_mgkg', 'Mg_mgkg', 'P_mgkg','AOB_Richness'), as.numeric)
aoa.asv.env <- aoa.meta.bulk %>%
dplyr::rename("AOA_Richness" = "Richness",
"AOA_Shannon" = "Shannon",
"AOA_InvSimpson" = "InvSimpson") # change column names
aoa.asv.env <- aoa.asv.env %>% mutate_at(c('GWC_g_g', 'TS', 'NH4', 'NO3', 'Nmin_tot', 'C_tot', 'N_tot', 'pH', 'K_mgkg', 'Mg_mgkg', 'P_mgkg','AOA_Richness'), as.numeric)
aoa.asv.env
# create  a microtable
aoa.microdata <- microtable$new(sample_table = aoa.asv.env, otu_table = aoa.asv.tab, tax_table = aoa.asv.tax)
################################################################################
#microeco
library(microeco)
# create  a microtable
aoa.microdata <- microtable$new(sample_table = aoa.asv.env, otu_table = aoa.asv.tab, tax_table = aoa.asv.tax)
# calculate beta diversity
aoa.microdata$tidy_dataset()
aoa.microdata$cal_betadiv(method = "bray",
unifrac = F,
binary = F)
# calculate and plot sample distances within groups
aoa.microdata$cal_group_distance(within_group = TRUE)
aoa.microdata$beta_diversity
# create an trans_beta object
# measure parameter must be one of names(dataset$beta_diversity)
t1 <- trans_beta$new(dataset = dataset, group = "Group", measure = "bray")
# create an trans_beta object
# measure parameter must be one of names(dataset$beta_diversity)
t1 <- trans_beta$new(dataset = dataset, group = "Group", measure = "bray")
t1
t1$dataset
# create  a microtable
aoa.microdata <- microtable$new(sample_table = aoa.asv.env, otu_table = aoa.asv.tab, tax_table = aoa.asv.tax)
# calculate beta diversity
aoa.microdata$tidy_dataset()
aoa.microdata$cal_betadiv(method = "bray",
unifrac = F,
binary = F)
# return t1$res_group_distance
# perform Wilcoxon Rank Sum and Signed Rank Tests
aoa.microdata$cal_group_distance_diff(method = "wilcox")
# create  a microtable
aoa.microdata <- microtable$new(sample_table = aoa.asv.env, otu_table = aoa.asv.tab, tax_table = aoa.asv.tax)
# calculate beta diversity
aoa.microdata$tidy_dataset()
aoa.microdata$cal_betadiv(method = "bray",
unifrac = F,
binary = F)
# create an trans_beta object
# measure parameter must be one of names(dataset$beta_diversity)
t1 <- trans_beta$new(dataset = aoa.microdata, group = "Group", measure = "bray")
# create an trans_beta object
# measure parameter must be one of names(dataset$beta_diversity)
t1 <- trans_beta$new(dataset = aoa.microdata, group = "x", measure = "bray")
# calculate and plot sample distances within groups
t1$cal_group_distance(within_group = TRUE)
# return t1$res_group_distance
# perform Wilcoxon Rank Sum and Signed Rank Tests
t1$cal_group_distance_diff(method = "wilcox")
# plot_group_order parameter can be used to adjust orders in x axis
t1$plot_group_distance(boxplot_add = "mean")
# calculate and plot sample distances between groups
t1$cal_group_distance(within_group = FALSE)
t1$cal_group_distance_diff(method = "wilcox")
# create an trans_beta object
# measure parameter must be one of names(dataset$beta_diversity)
t1 <- trans_beta$new(dataset = aoa.microdata, group = "x", measure = "bray")
# calculate and plot sample distances between groups
t1$cal_group_distance(within_group = FALSE)
t1$cal_group_distance_diff(method = "wilcox")
# create an trans_beta object
# measure parameter must be one of names(dataset$beta_diversity)
t1 <- trans_beta$new(dataset = aoa.microdata, group = "x", measure = "bray")
# calculate and plot sample distances between groups
t1$cal_group_distance(within_group = FALSE)
t1$cal_group_distance_diff(method = "KW")
t1$plot_group_distance(boxplot_add = "mean")
# create an trans_beta object
# measure parameter must be one of names(dataset$beta_diversity)
t1 <- trans_beta$new(dataset = aoa.microdata, group = "x", measure = "bray")
# calculate and plot sample distances between groups
t1$cal_group_distance(within_group = FALSE)
t1$cal_group_distance_diff(method = "anova")
t1$plot_group_distance(boxplot_add = "mean")
# create an trans_beta object
# measure parameter must be one of names(dataset$beta_diversity)
t1 <- trans_beta$new(dataset = aoa.microdata, group = "x", measure = "bray")
# calculate and plot sample distances within groups
t1$cal_group_distance(within_group = TRUE)
# return t1$res_group_distance
# perform Wilcoxon Rank Sum and Signed Rank Tests
t1$cal_group_distance_diff(method = "wilcox")
# plot_group_order parameter can be used to adjust orders in x axis
t1$plot_group_distance(boxplot_add = "mean")
# create an trans_beta object
# measure parameter must be one of names(dataset$beta_diversity)
t1 <- trans_beta$new(dataset = aoa.microdata, group = "x", measure = "bray")
# calculate and plot sample distances between groups
t1$cal_group_distance(within_group = FALSE)
t1$cal_group_distance_diff(method = "KW_dunn")
t1$plot_group_distance(boxplot_add = "mean")
geom_text()
